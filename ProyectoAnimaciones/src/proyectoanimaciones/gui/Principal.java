/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectoanimaciones.gui;

import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import proyectoanimaciones.backed.analizador.Lexico;
import proyectoanimaciones.backed.analizador.*;
import proyectoanimaciones.backed.analizador.pintar.LexicoPintar;
import proyectoanimaciones.backed.analizador.pintar.SintaxPintar;
import proyectoanimaciones.backed.manejadores.ManejadorExportar;
import proyectoanimaciones.backed.manejadores.ManejadorIfWhile;
import proyectoanimaciones.backed.manejadores.ManejadorSintactico;
import proyectoanimaciones.backed.objetos.Lienzo;

/**
 *
 * @author bryan
 */
public class Principal extends javax.swing.JFrame {
        
    private final FileNameExtensionFilter extensionLnz = new FileNameExtensionFilter("Lienzo (.lnz)", "lnz");
    private final FileNameExtensionFilter extensionTmp = new FileNameExtensionFilter("Tiempo (.tmp)", "tmp");
    private final FileNameExtensionFilter extensionClrs = new FileNameExtensionFilter("Colores (.clrs)", "clrs");
    private final FileNameExtensionFilter extensionPnt = new FileNameExtensionFilter("Pintar (.pnt)", "pnt");
    private int contLineasLnz;
    private int contLineasCrls;
    private int contLineasTmp;
    private int contLineasPnt;
    private int contLineasErrores;
    private String pathLnz;
    private String pathClrs;
    private String pathTmp;
    private String pathPnt;
    private List<Lienzo> lienzo;
    private final ManejadorSintactico ms = ManejadorSintactico.getInstancia();
    private final ManejadorExportar me = ManejadorExportar.getInstancia();
    
    /**
     * Creates new form FramePrincipal
     */
    public Principal() {
        initComponents();
        this.contLineasLnz = 1;
        this.contLineasCrls = 1;
        this.contLineasTmp = 1;
        this.contLineasPnt = 1;
        this.contLineasErrores = 1;
        this.menuGenerar.setEnabled(false);
        ms.setPrincipal(this);
        this.setLocationRelativeTo(null);
    }

    public List<Lienzo> getLienzo() {
        return lienzo;
    }

    public void setLienzo(List<Lienzo> lienzo) {
        this.lienzo = lienzo;
    }

    public String getPathLnz() {
        return pathLnz;
    }

    public String getPathClrs() {
        return pathClrs;
    }

    public String getPathTmp() {
        return pathTmp;
    }

    public String getPathPnt() {
        return pathPnt;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelPrincipal = new javax.swing.JPanel();
        panelPestaña = new javax.swing.JTabbedPane();
        panelContenedorLnz = new javax.swing.JPanel();
        scrollPaneLnz = new javax.swing.JScrollPane();
        txtAreaLnz = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        lineasLnz = new javax.swing.JEditorPane();
        panelContenedorColores = new javax.swing.JPanel();
        scrollPaneColores = new javax.swing.JScrollPane();
        txtAreaColores = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        lineasColores = new javax.swing.JEditorPane();
        panelContenedorTiempo = new javax.swing.JPanel();
        scrollPaneTiempo = new javax.swing.JScrollPane();
        txtAreaTiempo = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        lineasTiempo = new javax.swing.JEditorPane();
        panelContenedorPnt = new javax.swing.JPanel();
        scrollPanePintar = new javax.swing.JScrollPane();
        txtAreaPintar = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        lineasPintar = new javax.swing.JEditorPane();
        panelErrores = new javax.swing.JPanel();
        scrollErrores = new javax.swing.JScrollPane();
        txtAreaErrores = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        lineasErrores = new javax.swing.JEditorPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        menuGuardar = new javax.swing.JMenuItem();
        menuAbrir = new javax.swing.JMenu();
        menuALienzo = new javax.swing.JMenuItem();
        menuAColores = new javax.swing.JMenuItem();
        menuTiempo = new javax.swing.JMenuItem();
        menuPintar = new javax.swing.JMenuItem();
        menuNuevo = new javax.swing.JMenu();
        nuevoColores = new javax.swing.JMenuItem();
        nuevoLienzo = new javax.swing.JMenuItem();
        nuevoTiempo = new javax.swing.JMenuItem();
        nuevoPintar = new javax.swing.JMenuItem();
        menuAnalisi = new javax.swing.JMenu();
        menuGenerar = new javax.swing.JMenu();
        menuEditorGrafico = new javax.swing.JMenuItem();
        menuExportar = new javax.swing.JMenuItem();
        menuAyuda = new javax.swing.JMenu();
        menuManuialTecnico = new javax.swing.JMenuItem();
        menuManualUsuario = new javax.swing.JMenuItem();
        menuUml = new javax.swing.JMenuItem();
        menuAcercaDe = new javax.swing.JMenuItem();
        menuSalir = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtAreaLnz.setColumns(20);
        txtAreaLnz.setRows(5);
        txtAreaLnz.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAreaLnzKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAreaLnzKeyReleased(evt);
            }
        });
        scrollPaneLnz.setViewportView(txtAreaLnz);

        lineasLnz.setEditable(false);
        lineasLnz.setText("1");
        jScrollPane1.setViewportView(lineasLnz);

        javax.swing.GroupLayout panelContenedorLnzLayout = new javax.swing.GroupLayout(panelContenedorLnz);
        panelContenedorLnz.setLayout(panelContenedorLnzLayout);
        panelContenedorLnzLayout.setHorizontalGroup(
            panelContenedorLnzLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContenedorLnzLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPaneLnz, javax.swing.GroupLayout.DEFAULT_SIZE, 830, Short.MAX_VALUE))
        );
        panelContenedorLnzLayout.setVerticalGroup(
            panelContenedorLnzLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPaneLnz, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );

        panelPestaña.addTab(".lnz", panelContenedorLnz);

        txtAreaColores.setColumns(20);
        txtAreaColores.setRows(5);
        txtAreaColores.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAreaColoresKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAreaColoresKeyReleased(evt);
            }
        });
        scrollPaneColores.setViewportView(txtAreaColores);

        lineasColores.setEditable(false);
        lineasColores.setText("1");
        jScrollPane4.setViewportView(lineasColores);

        javax.swing.GroupLayout panelContenedorColoresLayout = new javax.swing.GroupLayout(panelContenedorColores);
        panelContenedorColores.setLayout(panelContenedorColoresLayout);
        panelContenedorColoresLayout.setHorizontalGroup(
            panelContenedorColoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelContenedorColoresLayout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPaneColores, javax.swing.GroupLayout.DEFAULT_SIZE, 829, Short.MAX_VALUE))
        );
        panelContenedorColoresLayout.setVerticalGroup(
            panelContenedorColoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPaneColores, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
            .addComponent(jScrollPane4)
        );

        panelPestaña.addTab(".clrs", panelContenedorColores);

        txtAreaTiempo.setColumns(20);
        txtAreaTiempo.setRows(5);
        txtAreaTiempo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAreaTiempoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAreaTiempoKeyReleased(evt);
            }
        });
        scrollPaneTiempo.setViewportView(txtAreaTiempo);

        lineasTiempo.setEditable(false);
        lineasTiempo.setText("1");
        jScrollPane5.setViewportView(lineasTiempo);

        javax.swing.GroupLayout panelContenedorTiempoLayout = new javax.swing.GroupLayout(panelContenedorTiempo);
        panelContenedorTiempo.setLayout(panelContenedorTiempoLayout);
        panelContenedorTiempoLayout.setHorizontalGroup(
            panelContenedorTiempoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContenedorTiempoLayout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPaneTiempo, javax.swing.GroupLayout.DEFAULT_SIZE, 830, Short.MAX_VALUE))
        );
        panelContenedorTiempoLayout.setVerticalGroup(
            panelContenedorTiempoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPaneTiempo, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
            .addComponent(jScrollPane5)
        );

        panelPestaña.addTab(".tmp", panelContenedorTiempo);

        txtAreaPintar.setColumns(20);
        txtAreaPintar.setRows(5);
        txtAreaPintar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAreaPintarKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAreaPintarKeyReleased(evt);
            }
        });
        scrollPanePintar.setViewportView(txtAreaPintar);

        lineasPintar.setEditable(false);
        lineasPintar.setText("1");
        jScrollPane6.setViewportView(lineasPintar);

        javax.swing.GroupLayout panelContenedorPntLayout = new javax.swing.GroupLayout(panelContenedorPnt);
        panelContenedorPnt.setLayout(panelContenedorPntLayout);
        panelContenedorPntLayout.setHorizontalGroup(
            panelContenedorPntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelContenedorPntLayout.createSequentialGroup()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPanePintar, javax.swing.GroupLayout.DEFAULT_SIZE, 828, Short.MAX_VALUE))
        );
        panelContenedorPntLayout.setVerticalGroup(
            panelContenedorPntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPanePintar, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
            .addComponent(jScrollPane6)
        );

        panelPestaña.addTab(".pnt", panelContenedorPnt);

        txtAreaErrores.setEditable(false);
        txtAreaErrores.setColumns(20);
        txtAreaErrores.setRows(5);
        txtAreaErrores.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAreaErroresKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAreaErroresKeyReleased(evt);
            }
        });
        scrollErrores.setViewportView(txtAreaErrores);

        lineasErrores.setEditable(false);
        lineasErrores.setText("1");
        jScrollPane7.setViewportView(lineasErrores);

        javax.swing.GroupLayout panelErroresLayout = new javax.swing.GroupLayout(panelErrores);
        panelErrores.setLayout(panelErroresLayout);
        panelErroresLayout.setHorizontalGroup(
            panelErroresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelErroresLayout.createSequentialGroup()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollErrores, javax.swing.GroupLayout.DEFAULT_SIZE, 829, Short.MAX_VALUE))
        );
        panelErroresLayout.setVerticalGroup(
            panelErroresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollErrores, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
            .addComponent(jScrollPane7)
        );

        panelPestaña.addTab("Errores", panelErrores);

        javax.swing.GroupLayout panelPrincipalLayout = new javax.swing.GroupLayout(panelPrincipal);
        panelPrincipal.setLayout(panelPrincipalLayout);
        panelPrincipalLayout.setHorizontalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPestaña)
        );
        panelPrincipalLayout.setVerticalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPestaña)
        );

        menuArchivo.setText("Archivo");

        menuGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuGuardar.setText("Guardar");
        menuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGuardarActionPerformed(evt);
            }
        });
        menuArchivo.add(menuGuardar);

        menuAbrir.setText("Abrir");

        menuALienzo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        menuALienzo.setText("Lienzo (.lnz)");
        menuALienzo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuALienzoActionPerformed(evt);
            }
        });
        menuAbrir.add(menuALienzo);

        menuAColores.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        menuAColores.setText("Colores (.clrs)");
        menuAColores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAColoresActionPerformed(evt);
            }
        });
        menuAbrir.add(menuAColores);

        menuTiempo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        menuTiempo.setText("Tiempo (.tmp)");
        menuTiempo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuTiempoActionPerformed(evt);
            }
        });
        menuAbrir.add(menuTiempo);

        menuPintar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        menuPintar.setText("Pintar (.pnt)");
        menuPintar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPintarActionPerformed(evt);
            }
        });
        menuAbrir.add(menuPintar);

        menuArchivo.add(menuAbrir);

        menuNuevo.setText("Nuevo");

        nuevoColores.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        nuevoColores.setText("Colores (.clrs)");
        nuevoColores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoColoresActionPerformed(evt);
            }
        });
        menuNuevo.add(nuevoColores);

        nuevoLienzo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.ALT_MASK));
        nuevoLienzo.setText("Lienzo (.lnz)");
        nuevoLienzo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoLienzoActionPerformed(evt);
            }
        });
        menuNuevo.add(nuevoLienzo);

        nuevoTiempo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_MASK));
        nuevoTiempo.setText("Tiempo (.tmp)");
        nuevoTiempo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoTiempoActionPerformed(evt);
            }
        });
        menuNuevo.add(nuevoTiempo);

        nuevoPintar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.ALT_MASK));
        nuevoPintar.setText("Pintar (.pnt)");
        nuevoPintar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoPintarActionPerformed(evt);
            }
        });
        menuNuevo.add(nuevoPintar);

        menuArchivo.add(menuNuevo);

        jMenuBar1.add(menuArchivo);

        menuAnalisi.setText("Analisis");
        menuAnalisi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuAnalisiMouseClicked(evt);
            }
        });
        jMenuBar1.add(menuAnalisi);

        menuGenerar.setText("Generar");

        menuEditorGrafico.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        menuEditorGrafico.setText("Editor Gráfico");
        menuEditorGrafico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditorGraficoActionPerformed(evt);
            }
        });
        menuGenerar.add(menuEditorGrafico);

        menuExportar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        menuExportar.setText("Generar (Exportar)");
        menuExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExportarActionPerformed(evt);
            }
        });
        menuGenerar.add(menuExportar);

        jMenuBar1.add(menuGenerar);

        menuAyuda.setText("Ayuda");

        menuManuialTecnico.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        menuManuialTecnico.setText("Manual Técnico");
        menuManuialTecnico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuManuialTecnicoActionPerformed(evt);
            }
        });
        menuAyuda.add(menuManuialTecnico);

        menuManualUsuario.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_MASK));
        menuManualUsuario.setText("Manual de Usuario");
        menuManualUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuManualUsuarioActionPerformed(evt);
            }
        });
        menuAyuda.add(menuManualUsuario);

        menuUml.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        menuUml.setText("Diagrama de Clases");
        menuUml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuUmlActionPerformed(evt);
            }
        });
        menuAyuda.add(menuUml);

        menuAcercaDe.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        menuAcercaDe.setText("Acerca De...");
        menuAcercaDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAcercaDeActionPerformed(evt);
            }
        });
        menuAyuda.add(menuAcercaDe);

        jMenuBar1.add(menuAyuda);

        menuSalir.setText("Salir");
        menuSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuSalirMouseClicked(evt);
            }
        });
        menuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSalirActionPerformed(evt);
            }
        });
        jMenuBar1.add(menuSalir);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtAreaLnzKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAreaLnzKeyPressed
        // TODO add your handling code here:
        contLineasLnz = cantSaltos(txtAreaLnz.getText());
        lineasLnz.setText(cadenaLineas(contLineasLnz));
    }//GEN-LAST:event_txtAreaLnzKeyPressed

    private void txtAreaLnzKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAreaLnzKeyReleased
        // TODO add your handling code here:
        contLineasLnz = cantSaltos(txtAreaLnz.getText());
        lineasLnz.setText(cadenaLineas(contLineasLnz));
    }//GEN-LAST:event_txtAreaLnzKeyReleased

    private void txtAreaColoresKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAreaColoresKeyPressed
        // TODO add your handling code here:
        contLineasCrls = cantSaltos(txtAreaLnz.getText());
        lineasColores.setText(cadenaLineas(contLineasCrls));
    }//GEN-LAST:event_txtAreaColoresKeyPressed

    private void txtAreaColoresKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAreaColoresKeyReleased
        // TODO add your handling code here:
        contLineasCrls = cantSaltos(txtAreaLnz.getText());
        lineasColores.setText(cadenaLineas(contLineasCrls));
    }//GEN-LAST:event_txtAreaColoresKeyReleased

    private void txtAreaTiempoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAreaTiempoKeyPressed
        // TODO add your handling code here:
        contLineasTmp = cantSaltos(txtAreaTiempo.getText());
        lineasTiempo.setText(cadenaLineas(contLineasTmp));
    }//GEN-LAST:event_txtAreaTiempoKeyPressed

    private void txtAreaTiempoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAreaTiempoKeyReleased
        // TODO add your handling code here:
        contLineasTmp = cantSaltos(txtAreaTiempo.getText());
        lineasTiempo.setText(cadenaLineas(contLineasTmp));
    }//GEN-LAST:event_txtAreaTiempoKeyReleased

    private void txtAreaPintarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAreaPintarKeyPressed
        // TODO add your handling code here:
        contLineasPnt = cantSaltos(txtAreaPintar.getText());
        lineasPintar.setText(cadenaLineas(contLineasPnt));
    }//GEN-LAST:event_txtAreaPintarKeyPressed

    private void txtAreaPintarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAreaPintarKeyReleased
        // TODO add your handling code here:
        contLineasPnt = cantSaltos(txtAreaPintar.getText());
        lineasPintar.setText(cadenaLineas(contLineasPnt));
    }//GEN-LAST:event_txtAreaPintarKeyReleased

    private void txtAreaErroresKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAreaErroresKeyPressed
        // TODO add your handling code here:
        contLineasErrores = cantSaltos(txtAreaErrores.getText());
        lineasErrores.setText(cadenaLineas(contLineasErrores));
    }//GEN-LAST:event_txtAreaErroresKeyPressed

    private void txtAreaErroresKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAreaErroresKeyReleased
        // TODO add your handling code here:
        contLineasErrores = cantSaltos(txtAreaErrores.getText());
        lineasErrores.setText(cadenaLineas(contLineasErrores));
    }//GEN-LAST:event_txtAreaErroresKeyReleased

    private void menuALienzoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuALienzoActionPerformed
        // TODO add your handling code here:
        abrirYNuevo(2, false, extensionLnz);
    }//GEN-LAST:event_menuALienzoActionPerformed

    private void menuAColoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAColoresActionPerformed
        // TODO add your handling code here:
        abrirYNuevo(1, false, extensionClrs);
    }//GEN-LAST:event_menuAColoresActionPerformed

    private void menuTiempoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuTiempoActionPerformed
        // TODO add your handling code here:
        abrirYNuevo(4, false, extensionTmp);
    }//GEN-LAST:event_menuTiempoActionPerformed

    private void menuPintarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPintarActionPerformed
        // TODO add your handling code here:
        abrirYNuevo(3, false, extensionPnt);
    }//GEN-LAST:event_menuPintarActionPerformed

    private void nuevoColoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoColoresActionPerformed
        // TODO add your handling code here:
        abrirYNuevo(1, true, extensionClrs);
    }//GEN-LAST:event_nuevoColoresActionPerformed

    private void nuevoLienzoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoLienzoActionPerformed
        // TODO add your handling code here:
        abrirYNuevo(2, true, extensionLnz);
    }//GEN-LAST:event_nuevoLienzoActionPerformed

    private void nuevoTiempoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoTiempoActionPerformed
        // TODO add your handling code here:
        abrirYNuevo(4, true, extensionTmp);
    }//GEN-LAST:event_nuevoTiempoActionPerformed

    private void nuevoPintarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoPintarActionPerformed
        // TODO add your handling code here:
        abrirYNuevo(3, false, extensionPnt);
    }//GEN-LAST:event_nuevoPintarActionPerformed

    private void menuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGuardarActionPerformed
        // TODO add your handling code here:
        try {
            if (pathClrs != null) {
                if (pathClrs.endsWith(".clrs")) {
                    guardar(pathClrs, txtAreaColores.getText());
                } else {
                    guardar(pathClrs + ".clrs", txtAreaColores.getText());
                }
            } 
            if (pathLnz != null) {
                if (pathLnz.endsWith(".lnz")) {
                    guardar(pathLnz, txtAreaLnz.getText());
                } else {
                    guardar(pathLnz + ".lnz", txtAreaLnz.getText());
                }
            }
            if (pathTmp != null) {
                if (pathTmp.endsWith(".tmp")) {
                    guardar(pathTmp, txtAreaTiempo.getText());
                } else {
                    guardar(pathTmp + ".tmp", txtAreaTiempo.getText());
                }
            }
            if (pathPnt != null) {
                if (pathPnt.endsWith(".pnt")) {
                    guardar(pathPnt, txtAreaPintar.getText());
                } else {
                    guardar(pathPnt + ".pnt", txtAreaPintar.getText());
                }
            }
            if (pathClrs != null || pathLnz != null || pathPnt != null || pathTmp != null) {
                JOptionPane.showMessageDialog(this, "Los cambios se han guardado.");
            } 
        } catch (IOException e) {
            System.out.println("Error " + e.toString());
        }
        
    }//GEN-LAST:event_menuGuardarActionPerformed

    private void menuEditorGraficoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditorGraficoActionPerformed
        // TODO add your handling code here:
        DialogEditorGrafico deg = new DialogEditorGrafico(this, true, pathLnz, pathClrs, pathTmp, pathPnt, lienzo);
        deg.setVisible(true);
        deg = null;
    }//GEN-LAST:event_menuEditorGraficoActionPerformed

    private void realizarAnalisisLCT(String comprobacion){
        try {
            Lexico lexicoLCT = new Lexico(new StringReader(comprobacion));
            lexicoLCT.setPrincipal(this);
            Sintax sintaxLCT = new Sintax(lexicoLCT, this);
            sintaxLCT.parse();
        } catch (Exception e) {
        }
    }
    
    private void realizarAnalisisPintar(String comprobacion){
        try {
            LexicoPintar lexicoPintar = new LexicoPintar(new StringReader(comprobacion));
            lexicoPintar.setPrincipal(this);
            SintaxPintar sintaxPintar = new SintaxPintar(lexicoPintar);
            sintaxPintar.setPrincipal(this);
            sintaxPintar.parse();
        } catch (Exception e) {
        }
    }
    
    private void menuAnalisiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuAnalisiMouseClicked
        // TODO add your handling code here:
        if (txtAreaLnz.getText().isEmpty() || txtAreaTiempo.getText().isEmpty() || txtAreaPintar.getText().isEmpty() || txtAreaColores.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No se puede realizar el analisis debido a que aun falta un archivo.", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                ms.clear();
                txtAreaErrores.setText("");
                addErrores("\nAREA LIENZO\n");
                realizarAnalisisLCT(txtAreaLnz.getText());
                addErrores("\nAREA COLORES\n");
                realizarAnalisisLCT(txtAreaColores.getText());
                addErrores("\nAREA TIEMPO\n");
                realizarAnalisisLCT(txtAreaTiempo.getText());
                addErrores("\nAREA PINTAR\n");
                realizarAnalisisPintar(txtAreaPintar.getText());
                if (txtAreaErrores.getText().length() <= 57) {
                    lienzo = ManejadorSintactico.getLienzos();
                    menuGenerar.setEnabled(true);
                    JOptionPane.showMessageDialog(this, "Analisis Realizado con Exito");
//                    cleanAreas();
                } else {
                    menuGenerar.setEnabled(false);
                    JOptionPane.showMessageDialog(this, "Error en analisis revisa el area de Errores para más información.", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_menuAnalisiMouseClicked

    private void menuAcercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAcercaDeActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, 
 "                                         ANIMATIONS - GUATEMALA v1.0\n" +
"Animations - Guatemala, es un softaware dedicado a la creacion de animaciones con\n" +
"gráficos en 8 bits, con la caracteristica de que las imagenes son diseñadas en base \n" +
"a archivos de entrada.\n" +
"\nCopyright 2020" +
"\nEste softaware fue desarrollado por:" +
"\n(bryanrene-gomezgomez@cunoc.edu.gt) creado en:" +
"\n\t\tNetBeans IDE 8.2", "Acerca de...", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_menuAcercaDeActionPerformed

    private void menuExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExportarActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File("."));
        chooser.setDialogTitle("Selecciona la carpeta");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        int opcion = chooser.showDialog(null, "Exportar");
        if (opcion == JFileChooser.APPROVE_OPTION) {
            lienzo.forEach((lnz) -> {
                if (lnz.getTipo().equals("png")) {
                    try {
                        me.expotarPNG(lnz, chooser.getSelectedFile().getAbsolutePath());
                        JOptionPane.showMessageDialog(null, "Exportado: " + chooser.getSelectedFile().getAbsolutePath());
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, "Error al exportar, vuelva a intentarlo.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    if (me.exportarGif(lnz, chooser.getSelectedFile().getAbsolutePath())) {
                        JOptionPane.showMessageDialog(null, "Exportado: " + chooser.getSelectedFile().getAbsolutePath());
                    } else {
                        JOptionPane.showMessageDialog(null, "Error al exportar, vuelva a intentarlo.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    }
                }
            });
            
        }
    }//GEN-LAST:event_menuExportarActionPerformed

    private void menuManuialTecnicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuManuialTecnicoActionPerformed
        // TODO add your handling code here:
        abrirPdf("./Manual Tecnico.pdf");
    }//GEN-LAST:event_menuManuialTecnicoActionPerformed

    private void menuManualUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuManualUsuarioActionPerformed
        // TODO add your handling code here:
        abrirPdf("./Manual de Usuario.pdf");
    }//GEN-LAST:event_menuManualUsuarioActionPerformed

    private void menuUmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuUmlActionPerformed
        try {
            // TODO add your handling code here:
            Runtime rt = Runtime.getRuntime();
            rt.exec("nohup display ./UML-ProyectoFinal.png");
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuUmlActionPerformed

    private void menuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSalirActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_menuSalirActionPerformed

    private void menuSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuSalirMouseClicked
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "Gracias por utilizar esta aplicación.");
        System.exit(0);
    }//GEN-LAST:event_menuSalirMouseClicked

    private void abrirPdf(String path){
        try {
            File archivo = new File(path);
            Desktop.getDesktop().open(archivo);
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void cleanAreas(){
        addPaneDesc(1, ".clrs", "");
        addPaneDesc(2, ".lnz", "");
        addPaneDesc(3, ".pnt", "");
        addPaneDesc(4, ".tmp", "");
    }
    
    private void guardar(String path, String textoSalida) throws IOException{
        File chooser = new File(path);
        try (FileOutputStream salida = new FileOutputStream(chooser)) {
            byte[] byteTxt = textoSalida.getBytes();
            salida.write(byteTxt);
        } catch (FileNotFoundException ex) {
            System.out.println("no existe el archivo");
        }
    }
    
    private void agregarPath(String path, int caso){
        switch (caso) {
            case 1://Colores
                pathClrs = path;
                break;
            case 2://Lienzo
                pathLnz = path;
                break;
            case 3://Pintar
                pathPnt = path;
                break;
            case 4://Tiempo
                pathTmp = path;
                break;
        }
    }
    
    private void crearArchivo(int caso, String path) throws IOException{
        switch (caso) {
            case 1://Colores
                guardar(path + ".clrs", "");
                pathClrs += ".clrs";
                break;
            case 2://Lienzo
                guardar(path + ".lnz", "");
                pathLnz += ".lnz";
                break;
            case 3://Pintar
                guardar(path + ".pnt", "");
                pathPnt += ".pnt";
                break;
            case 4://Tiempo
                guardar(path + ".tmp", "");
                pathTmp += ".tmp";
                break;
        }    
    }
    
    private String getPath(int caso) {
        switch (caso) {
            case 1: return pathClrs;
            case 2: return pathLnz;
            case 3: return pathPnt;
            case 4: return pathTmp;
        } return "";
    }
    
    private void abrirYNuevo(int caso, boolean crear, FileNameExtensionFilter extension){
        ManejadorIfWhile iw = ManejadorIfWhile.getInstancia();
        iw.setPrincipal(this);
        menuGenerar.setEnabled(false);
        JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(extension);
        int opcion;
        if (crear) {
            opcion = chooser.showSaveDialog(this);
        } else {
            opcion = chooser.showOpenDialog(this);
        }
        if (opcion == JFileChooser.APPROVE_OPTION) {
            try {
                String docIde = "";
                File archivo = chooser.getSelectedFile();
                agregarPath(archivo.getAbsolutePath(), caso);
                if (crear) {
                    crearArchivo(caso, archivo.getAbsolutePath());
                    archivo = new File(getPath(caso));
                    JOptionPane.showMessageDialog(this, "Creado");
                }
                FileReader entrada;
                entrada = new FileReader(archivo);
                int e;
                while ((e = entrada.read()) != -1) {
                    char caracter = (char) e;
                    docIde += caracter;
                }
                entrada.close();
                addPaneDesc(caso, archivo.getName(), docIde);
            } catch (IOException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private void addPaneDesc(int caso, String title, String txt){
        switch (caso) {
            case 1://Colores
                panelPestaña.setTitleAt(1, title);
                addTxtColores(txt);
                break;
            case 2://Lienzo
                panelPestaña.setTitleAt(0, title);
                addTxtLnz(txt);
                break;
            case 3://Pintar
                panelPestaña.setTitleAt(3, title);
                addTxtPintar(txt);
                break;
            case 4://Tiempo
                panelPestaña.setTitleAt(2, title);
                addTxtTiempo(txt);
                break;
        }
    }
    
    private int cantSaltos(String entrada){
        String [] aux = entrada.split("\n");
        return aux.length;
    }
    
    private String cadenaLineas(int cont) {
        String salida = "1";
        for (int i = 1; i < cont; i++) {
            salida += "\n" + (i+1);
        } return salida;
    }
    
    public void addTxtLnz(String txt){
        contLineasLnz = cantSaltos(txt);
        lineasLnz.setText(cadenaLineas(contLineasLnz));
        txtAreaLnz.setText(txt);
    }
    
    public void addTxtPintar(String txt){
        contLineasPnt = cantSaltos(txt);
        lineasPintar.setText(cadenaLineas(contLineasPnt));
        txtAreaPintar.setText(txt);
    }
    
    public void addTxtTiempo(String txt){
        contLineasTmp = cantSaltos(txt);
        lineasTiempo.setText(cadenaLineas(contLineasTmp));
        txtAreaTiempo.setText(txt);
    }
    
    public void addTxtColores(String txt){
        contLineasCrls = cantSaltos(txt);
        lineasColores.setText(cadenaLineas(contLineasCrls));
        txtAreaColores.setText(txt);
    }
    
    public void addErrores(String txt){
        txtAreaErrores.setText(txtAreaErrores.getText() + txt + "\n");
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.gtk.GTKLookAndFeel");
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Principal().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JEditorPane lineasColores;
    private javax.swing.JEditorPane lineasErrores;
    private javax.swing.JEditorPane lineasLnz;
    private javax.swing.JEditorPane lineasPintar;
    private javax.swing.JEditorPane lineasTiempo;
    private javax.swing.JMenuItem menuAColores;
    private javax.swing.JMenuItem menuALienzo;
    private javax.swing.JMenu menuAbrir;
    private javax.swing.JMenuItem menuAcercaDe;
    private javax.swing.JMenu menuAnalisi;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenu menuAyuda;
    private javax.swing.JMenuItem menuEditorGrafico;
    private javax.swing.JMenuItem menuExportar;
    private javax.swing.JMenu menuGenerar;
    private javax.swing.JMenuItem menuGuardar;
    private javax.swing.JMenuItem menuManualUsuario;
    private javax.swing.JMenuItem menuManuialTecnico;
    private javax.swing.JMenu menuNuevo;
    private javax.swing.JMenuItem menuPintar;
    private javax.swing.JMenu menuSalir;
    private javax.swing.JMenuItem menuTiempo;
    private javax.swing.JMenuItem menuUml;
    private javax.swing.JMenuItem nuevoColores;
    private javax.swing.JMenuItem nuevoLienzo;
    private javax.swing.JMenuItem nuevoPintar;
    private javax.swing.JMenuItem nuevoTiempo;
    private javax.swing.JPanel panelContenedorColores;
    private javax.swing.JPanel panelContenedorLnz;
    private javax.swing.JPanel panelContenedorPnt;
    private javax.swing.JPanel panelContenedorTiempo;
    private javax.swing.JPanel panelErrores;
    private javax.swing.JTabbedPane panelPestaña;
    private javax.swing.JPanel panelPrincipal;
    private javax.swing.JScrollPane scrollErrores;
    private javax.swing.JScrollPane scrollPaneColores;
    private javax.swing.JScrollPane scrollPaneLnz;
    private javax.swing.JScrollPane scrollPanePintar;
    private javax.swing.JScrollPane scrollPaneTiempo;
    private javax.swing.JTextArea txtAreaColores;
    private javax.swing.JTextArea txtAreaErrores;
    private javax.swing.JTextArea txtAreaLnz;
    private javax.swing.JTextArea txtAreaPintar;
    private javax.swing.JTextArea txtAreaTiempo;
    // End of variables declaration//GEN-END:variables
}
