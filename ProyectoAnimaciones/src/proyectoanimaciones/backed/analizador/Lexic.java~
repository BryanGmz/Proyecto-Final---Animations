/* The following code was generated by JFlex 1.4.3 on 23/05/20 02:16 PM */

package proyectoanimaciones.backed.analizador;

import java_cup.runtime.Symbol;
import proyectoanimaciones.gui.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 23/05/20 02:16 PM from the specification file
 * <tt>src/proyectoanimaciones/backed/analizador/Lexer.flex</tt>
 */
public class Lexic implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  7,  0,  0,  6,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    11,  5, 52, 61,  5,  5,  5,  5,  5,  5,  5,  5, 54,  5,  0,  5, 
     4, 59, 60,  4,  4,  4,  2,  2,  2,  2, 53,  0,  0,  5,  0,  5, 
     5,  3, 35, 19,  3, 14, 33, 38, 48, 13,  1,  1, 12, 22, 15, 17, 
    23,  1, 20, 18, 21,  1,  1,  1, 49,  1, 16, 57,  0, 58,  0, 45, 
     0, 39, 27, 43, 34, 29, 50, 51,  1, 31,  1,  1, 36, 26, 24, 25, 
    32,  1, 28, 44, 30, 37,  1,  1, 46, 47,  1, 55,  5, 56,  5,  0, 
     9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  5,  5,  0,  0,  0,  0,  0,  5,  0,  0,  5,  5,  0,  0,  0, 
     5, 41,  0,  0,  0,  0,  5,  5,  0,  0,  0,  5,  0,  5,  0,  0, 
     0,  0,  0, 40,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5, 
     0,  0,  8,  0,  0,  0,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     5, 42,  0,  0,  0,  0,  0,  0,  5,  0,  0,  0,  0,  0,  5,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\2\1\1\2\1\1\16\3"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\2\4"+
    "\1\2\1\4\1\0\11\3\1\14\10\3\3\0\1\4"+
    "\1\0\1\15\1\1\2\3\1\16\14\3\1\17\1\20"+
    "\3\0\1\21\2\0\4\3\1\22\6\3\1\23\2\3"+
    "\1\24\2\0\4\3\2\0\2\3\1\25\2\3\1\26"+
    "\1\3\1\27\1\0\3\3\1\30\1\0\1\31\1\32"+
    "\3\3\1\33\1\0\1\34\1\35\1\36\1\37\3\3"+
    "\1\40\1\41\1\3\1\42\2\3\1\43\1\44";

  private static int [] zzUnpackAction() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2"+
    "\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554\0\76"+
    "\0\76\0\76\0\76\0\76\0\76\0\u0592\0\u05d0\0\u060e"+
    "\0\u064c\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe"+
    "\0\u083c\0\u087a\0\u08b8\0\174\0\u08f6\0\u0934\0\u0972\0\u09b0"+
    "\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0"+
    "\0\u0bde\0\u064c\0\u0c1c\0\u0c5a\0\u0c98\0\174\0\u0cd6\0\u0d14"+
    "\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04"+
    "\0\u0f42\0\u0f80\0\174\0\174\0\u0fbe\0\u0ffc\0\u103a\0\u064c"+
    "\0\u1078\0\u0174\0\u10b6\0\u10f4\0\u1132\0\u1170\0\174\0\u11ae"+
    "\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\174\0\u1322\0\u1360"+
    "\0\76\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512"+
    "\0\u1550\0\u158e\0\u15cc\0\174\0\u160a\0\u1648\0\174\0\u1686"+
    "\0\76\0\u16c4\0\u1702\0\u1740\0\u177e\0\174\0\u17bc\0\76"+
    "\0\174\0\u17fa\0\u1838\0\u1876\0\174\0\u18b4\0\174\0\174"+
    "\0\174\0\76\0\u18f2\0\u1930\0\u196e\0\76\0\174\0\u19ac"+
    "\0\174\0\u19ea\0\u1a28\0\174\0\174";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\4\1\2\1\5\1\6"+
    "\1\7\2\2\1\10\1\11\6\3\1\12\1\13\1\14"+
    "\2\3\1\15\5\3\1\16\1\17\1\3\1\20\1\21"+
    "\1\22\2\3\1\23\1\3\3\2\1\24\4\3\1\25"+
    "\1\3\1\26\1\3\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\77\0\4\3\7\0"+
    "\34\3\3\0\11\3\7\0\2\3\3\0\1\41\1\0"+
    "\1\41\66\0\2\41\7\0\1\5\76\0\1\6\77\0"+
    "\1\42\77\0\1\10\63\0\4\3\7\0\1\3\1\43"+
    "\32\3\3\0\11\3\7\0\2\3\2\0\4\3\7\0"+
    "\5\3\1\44\26\3\3\0\11\3\7\0\2\3\2\0"+
    "\4\3\7\0\21\3\1\45\12\3\3\0\11\3\7\0"+
    "\2\3\2\0\4\3\7\0\1\3\1\46\32\3\3\0"+
    "\11\3\7\0\2\3\2\0\4\3\7\0\15\3\1\47"+
    "\16\3\3\0\11\3\7\0\2\3\2\0\4\3\7\0"+
    "\23\3\1\50\7\3\1\51\3\0\11\3\7\0\2\3"+
    "\2\0\4\3\7\0\14\3\1\52\1\3\1\53\7\3"+
    "\1\54\5\3\3\0\11\3\7\0\2\3\2\0\4\3"+
    "\7\0\15\3\1\55\16\3\3\0\11\3\7\0\2\3"+
    "\2\0\4\3\7\0\23\3\1\56\5\3\1\57\2\3"+
    "\3\0\11\3\7\0\2\3\2\0\4\3\7\0\30\3"+
    "\1\60\3\3\3\0\11\3\7\0\2\3\2\0\4\3"+
    "\7\0\20\3\1\61\13\3\3\0\11\3\7\0\2\3"+
    "\2\0\4\3\7\0\31\3\1\62\2\3\3\0\11\3"+
    "\7\0\2\3\2\0\4\3\7\0\2\3\1\63\31\3"+
    "\3\0\11\3\7\0\2\3\2\0\4\3\7\0\23\3"+
    "\1\64\10\3\3\0\11\3\7\0\2\3\2\0\5\65"+
    "\6\0\24\65\1\66\7\65\3\0\10\65\1\67\3\0"+
    "\2\65\2\0\2\65\3\0\1\4\1\0\1\4\66\0"+
    "\2\4\3\0\1\41\1\0\1\70\66\0\2\70\3\0"+
    "\3\71\11\0\1\71\4\0\1\71\7\0\1\71\1\0"+
    "\1\71\3\0\3\71\3\0\1\71\3\0\1\71\6\0"+
    "\1\71\10\0\2\71\3\0\1\72\1\0\1\72\66\0"+
    "\2\72\13\0\1\73\64\0\4\3\7\0\2\3\1\74"+
    "\31\3\3\0\11\3\7\0\2\3\2\0\4\3\7\0"+
    "\1\75\33\3\3\0\11\3\7\0\2\3\2\0\4\3"+
    "\7\0\26\3\1\76\5\3\3\0\11\3\7\0\2\3"+
    "\2\0\4\3\7\0\2\3\1\77\31\3\3\0\11\3"+
    "\7\0\2\3\2\0\4\3\7\0\16\3\1\100\15\3"+
    "\3\0\11\3\7\0\2\3\2\0\4\3\7\0\24\3"+
    "\1\101\7\3\3\0\11\3\7\0\2\3\2\0\4\3"+
    "\7\0\16\3\1\102\15\3\3\0\11\3\7\0\2\3"+
    "\2\0\4\3\7\0\23\3\1\103\10\3\3\0\11\3"+
    "\7\0\2\3\2\0\4\3\7\0\33\3\1\104\3\0"+
    "\11\3\7\0\2\3\2\0\4\3\7\0\14\3\1\105"+
    "\17\3\3\0\11\3\7\0\2\3\2\0\4\3\7\0"+
    "\16\3\1\106\15\3\3\0\11\3\7\0\2\3\2\0"+
    "\4\3\7\0\20\3\1\107\13\3\3\0\11\3\7\0"+
    "\2\3\2\0\4\3\7\0\31\3\1\110\2\3\3\0"+
    "\11\3\7\0\2\3\2\0\4\3\7\0\21\3\1\111"+
    "\12\3\3\0\11\3\7\0\2\3\2\0\4\3\7\0"+
    "\33\3\1\112\3\0\11\3\7\0\2\3\2\0\4\3"+
    "\7\0\34\3\3\0\6\3\1\113\2\3\7\0\2\3"+
    "\2\0\4\3\7\0\14\3\1\114\17\3\3\0\11\3"+
    "\7\0\2\3\2\0\6\115\4\0\35\115\3\0\11\115"+
    "\3\0\2\115\2\0\2\115\2\0\6\115\4\0\15\115"+
    "\1\116\17\115\3\0\11\115\3\0\2\115\2\0\2\115"+
    "\2\0\6\115\4\0\24\115\1\117\10\115\3\0\11\115"+
    "\3\0\2\115\2\0\2\115\3\0\1\72\1\0\1\120"+
    "\66\0\2\120\3\0\3\121\11\0\1\121\4\0\1\121"+
    "\7\0\1\121\1\0\1\121\3\0\3\121\3\0\1\121"+
    "\3\0\1\121\6\0\1\121\10\0\2\121\11\0\1\122"+
    "\66\0\4\3\7\0\3\3\1\123\30\3\3\0\11\3"+
    "\7\0\2\3\2\0\4\3\7\0\5\3\1\124\26\3"+
    "\3\0\11\3\7\0\2\3\2\0\4\3\7\0\12\3"+
    "\1\125\21\3\3\0\11\3\7\0\2\3\2\0\4\3"+
    "\7\0\17\3\1\126\14\3\3\0\11\3\7\0\2\3"+
    "\2\0\4\3\7\0\15\3\1\127\16\3\3\0\11\3"+
    "\7\0\2\3\2\0\4\3\7\0\33\3\1\130\3\0"+
    "\11\3\7\0\2\3\2\0\4\3\7\0\34\3\3\0"+
    "\1\131\10\3\7\0\2\3\2\0\4\3\7\0\34\3"+
    "\3\0\10\3\1\132\7\0\2\3\2\0\4\3\7\0"+
    "\26\3\1\133\5\3\3\0\11\3\7\0\2\3\2\0"+
    "\4\3\7\0\21\3\1\134\12\3\3\0\11\3\7\0"+
    "\2\3\2\0\4\3\7\0\33\3\1\135\3\0\11\3"+
    "\7\0\2\3\2\0\4\3\7\0\21\3\1\136\12\3"+
    "\3\0\11\3\7\0\2\3\2\0\4\3\7\0\21\3"+
    "\1\137\12\3\3\0\11\3\7\0\2\3\2\0\4\3"+
    "\7\0\26\3\1\140\5\3\3\0\11\3\7\0\2\3"+
    "\2\0\6\115\4\0\35\115\3\0\11\115\1\141\2\0"+
    "\2\115\2\0\2\115\2\0\6\115\4\0\35\115\3\0"+
    "\10\115\1\142\1\141\2\0\2\115\2\0\2\115\2\0"+
    "\6\115\4\0\35\115\3\0\7\115\1\142\1\115\1\141"+
    "\2\0\2\115\2\0\2\115\3\0\3\143\11\0\1\143"+
    "\4\0\1\143\7\0\1\143\1\0\1\143\3\0\3\143"+
    "\3\0\1\143\3\0\1\143\6\0\1\143\10\0\2\143"+
    "\2\0\4\3\7\0\4\3\1\144\27\3\3\0\11\3"+
    "\7\0\2\3\2\0\4\3\7\0\10\3\1\145\23\3"+
    "\3\0\11\3\7\0\2\3\2\0\4\3\7\0\13\3"+
    "\1\146\20\3\3\0\11\3\7\0\2\3\2\0\4\3"+
    "\7\0\20\3\1\147\13\3\3\0\11\3\7\0\2\3"+
    "\2\0\4\3\7\0\34\3\1\150\1\0\1\151\11\3"+
    "\7\0\2\3\2\0\4\3\7\0\23\3\1\152\10\3"+
    "\3\0\11\3\7\0\2\3\2\0\4\3\7\0\21\3"+
    "\1\153\12\3\3\0\11\3\7\0\2\3\2\0\4\3"+
    "\7\0\15\3\1\154\16\3\3\0\11\3\7\0\2\3"+
    "\2\0\4\3\7\0\14\3\1\155\17\3\3\0\11\3"+
    "\7\0\2\3\2\0\4\3\7\0\34\3\3\0\1\156"+
    "\10\3\7\0\2\3\2\0\4\3\7\0\14\3\1\157"+
    "\17\3\3\0\11\3\7\0\2\3\2\0\4\3\7\0"+
    "\20\3\1\160\13\3\3\0\11\3\7\0\2\3\2\0"+
    "\6\115\4\0\35\115\3\0\11\115\1\161\2\0\2\115"+
    "\2\0\2\115\3\0\3\162\11\0\1\162\4\0\1\162"+
    "\7\0\1\162\1\0\1\162\3\0\3\162\3\0\1\162"+
    "\3\0\1\162\6\0\1\162\10\0\2\162\2\0\4\3"+
    "\7\0\5\3\1\163\26\3\3\0\11\3\7\0\2\3"+
    "\2\0\4\3\7\0\2\3\1\164\31\3\3\0\11\3"+
    "\7\0\2\3\2\0\4\3\7\0\5\3\1\165\26\3"+
    "\3\0\11\3\7\0\2\3\2\0\4\3\7\0\21\3"+
    "\1\166\12\3\3\0\11\3\7\0\2\3\52\0\1\167"+
    "\55\0\1\170\45\0\4\3\7\0\15\3\1\171\16\3"+
    "\3\0\11\3\7\0\2\3\2\0\4\3\7\0\14\3"+
    "\1\172\17\3\3\0\11\3\7\0\2\3\2\0\4\3"+
    "\7\0\34\3\3\0\1\3\1\173\7\3\7\0\2\3"+
    "\2\0\4\3\7\0\23\3\1\174\10\3\3\0\11\3"+
    "\7\0\2\3\2\0\4\3\7\0\15\3\1\175\16\3"+
    "\3\0\11\3\7\0\2\3\3\0\3\176\11\0\1\176"+
    "\4\0\1\176\7\0\1\176\1\0\1\176\3\0\3\176"+
    "\3\0\1\176\3\0\1\176\6\0\1\176\10\0\2\176"+
    "\2\0\4\3\7\0\6\3\1\177\25\3\3\0\11\3"+
    "\7\0\2\3\2\0\4\3\7\0\6\3\1\200\25\3"+
    "\3\0\11\3\7\0\2\3\2\0\4\3\7\0\6\3"+
    "\1\201\25\3\3\0\11\3\7\0\2\3\32\0\1\202"+
    "\45\0\4\3\7\0\21\3\1\203\12\3\3\0\11\3"+
    "\7\0\2\3\2\0\4\3\7\0\23\3\1\204\10\3"+
    "\3\0\11\3\7\0\2\3\2\0\4\3\7\0\15\3"+
    "\1\205\16\3\3\0\11\3\7\0\2\3\3\0\3\206"+
    "\11\0\1\206\4\0\1\206\7\0\1\206\1\0\1\206"+
    "\3\0\3\206\3\0\1\206\3\0\1\206\6\0\1\206"+
    "\10\0\2\206\2\0\4\3\7\0\34\3\3\0\1\3"+
    "\1\207\7\3\7\0\2\3\2\0\4\3\7\0\15\3"+
    "\1\210\16\3\3\0\11\3\7\0\2\3\2\0\4\3"+
    "\7\0\14\3\1\211\17\3\3\0\11\3\7\0\2\3"+
    "\2\0\4\3\7\0\14\3\1\212\17\3\3\0\11\3"+
    "\7\0\2\3\2\0\4\3\7\0\34\3\3\0\2\3"+
    "\1\213\6\3\7\0\2\3\2\0\4\3\7\0\34\3"+
    "\3\0\3\3\1\214\1\215\4\3\7\0\2\3\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6758];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\25\1\6\11\4\1\1\0\22\1\3\0"+
    "\1\1\1\0\23\1\3\0\1\1\2\0\16\1\1\11"+
    "\2\0\4\1\2\0\7\1\1\11\1\0\4\1\1\0"+
    "\1\11\5\1\1\0\3\1\1\11\3\1\1\11\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Principal principal;

    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline + 1, yycolumn + 1, value);
    }

    private Symbol symbol(int type){
        return new Symbol(type, yyline + 1, yycolumn + 1);
    }

    public void setPrincipal(Principal principal){
        this.principal = principal;
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexic(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexic(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 22: 
          { return new Symbol(sym.Green, yychar, yyline, yytext());
          }
        case 37: break;
        case 10: 
          { return new Symbol(sym.LlaveA, yychar, yyline, yytext());
          }
        case 38: break;
        case 23: 
          { return new Symbol(sym.Extension, yychar, yyline, new String(yytext()));
          }
        case 39: break;
        case 12: 
          { return new Symbol(sym.Id, yychar, yyline, yytext());
          }
        case 40: break;
        case 29: 
          { return new Symbol(sym.Colores, yychar, yyline, yytext());
          }
        case 41: break;
        case 35: 
          { return new Symbol(sym.DimensionX, yychar, yyline, yytext());
          }
        case 42: break;
        case 28: 
          { return new Symbol(sym.Lienzos, yychar, yyline, yytext());
          }
        case 43: break;
        case 2: 
          { principal.addErrores(
                      "\nError Lexico: "
              + "\n\tLinea #:                     << " + (yyline + 1) + " >> "
              + "\n\tColumna #:                   << " + (yycolumn + 1) + " >>"
              + "\n\tToken NO Reconocido:         << " + yytext() + " >> ");
          }
        case 44: break;
        case 14: 
          { return new Symbol(sym.Red, yychar, yyline, yytext());
          }
        case 45: break;
        case 25: 
          { return new Symbol(sym.Tamaño, yychar, yyline, yytext());
          }
        case 46: break;
        case 27: 
          { return new Symbol(sym.Cuadro, yychar, yyline, yytext());
          }
        case 47: break;
        case 31: 
          { return new Symbol(sym.TamañoR, yychar, yyline, yytext());
          }
        case 48: break;
        case 30: 
          { return new Symbol(sym.Tiempos, yychar, yyline, yytext());
          }
        case 49: break;
        case 17: 
          { return new Symbol(sym.NumeroRGB_2, yychar, yyline, new String(yytext()));
          }
        case 50: break;
        case 16: 
          { return new Symbol(sym.Fin, yychar, yyline, yytext());
          }
        case 51: break;
        case 21: 
          { return new Symbol(sym.Fondo, yychar, yyline, yytext());
          }
        case 52: break;
        case 8: 
          { return new Symbol(sym.CorcheteA, yychar, yyline, yytext());
          }
        case 53: break;
        case 11: 
          { return new Symbol(sym.LlaveC, yychar, yyline, yytext());
          }
        case 54: break;
        case 6: 
          { return new Symbol(sym.DosPuntos, yychar, yyline, yytext());
          }
        case 55: break;
        case 18: 
          { return new Symbol(sym.Tipo, yychar, yyline, yytext());
          }
        case 56: break;
        case 19: 
          { return new Symbol(sym.Blue, yychar, yyline, yytext());
          }
        case 57: break;
        case 13: 
          { return new Symbol(sym.Numero, yychar, yyline, new String(yytext()));
          }
        case 58: break;
        case 20: 
          { System.out.println("NA: " + yytext() + " L " + yyline +1 + " C " + yycolumn +1 );return new Symbol(sym.NombreLienzo, yychar, yyline, new String(yytext()));
          }
        case 59: break;
        case 24: 
          { return new Symbol(sym.Nombre, yychar, yyline, yytext());
          }
        case 60: break;
        case 33: 
          { return new Symbol(sym.Imagenes, yychar, yyline, yytext());
          }
        case 61: break;
        case 26: 
          { return new Symbol(sym.Inicio, yychar, yyline, yytext());
          }
        case 62: break;
        case 5: 
          { System.out.println("Comillas: " + yytext() + " L " + yyline +1 + " C " + yycolumn +1 );return new Symbol(sym.Comillas, yychar, yyline, yytext());
          }
        case 63: break;
        case 3: 
          { System.out.println("ID: " + yytext() + " L " + yyline +1 + " C " + yycolumn +1 );return new Symbol(sym.Identificador, yychar, yyline, new String(yytext()));
          }
        case 64: break;
        case 34: 
          { return new Symbol(sym.Duracion, yychar, yyline, yytext());
          }
        case 65: break;
        case 15: 
          { return new Symbol(sym.Hex, yychar, yyline, yytext());
          }
        case 66: break;
        case 9: 
          { return new Symbol(sym.CorcheteC, yychar, yyline, yytext());
          }
        case 67: break;
        case 36: 
          { return new Symbol(sym.DimensionY, yychar, yyline, yytext());
          }
        case 68: break;
        case 1: 
          { /*Ignore*/
          }
        case 69: break;
        case 7: 
          { return new Symbol(sym.Coma, yychar, yyline, yytext());
          }
        case 70: break;
        case 4: 
          { return new Symbol(sym.NumeroRGB_1, yychar, yyline, new String(yytext()));
          }
        case 71: break;
        case 32: 
          { return new Symbol(sym.Hexadecimal, yychar, yyline, new String(yytext()));
          }
        case 72: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexic <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Lexic scanner = null;
        try {
          scanner = new Lexic( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
