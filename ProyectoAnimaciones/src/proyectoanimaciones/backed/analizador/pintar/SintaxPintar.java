
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package proyectoanimaciones.backed.analizador.pintar;

import proyectoanimaciones.backed.objetos.*;
import proyectoanimaciones.backed.manejadores.*;
import proyectoanimaciones.gui.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxPintar extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxPintar() {super();}

  /** Constructor which sets the default scanner.
     * @param s Constructor which sets the default scanner.*/
  @Deprecated
  public SintaxPintar(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner.
     * @param s Constructor which sets the default scanner.
     * @param sf  Constructor which sets the default scanner*/
  public SintaxPintar(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\211\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\003\000\002\005\006" +
    "\000\002\005\005\000\002\005\004\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\006" +
    "\005\000\002\007\005\000\002\010\005\000\002\013\005" +
    "\000\002\013\003\000\002\013\007\000\002\013\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\003\000\002\022\003\000\002\014" +
    "\005\000\002\014\003\000\002\014\007\000\002\014\005" +
    "\000\002\024\005\000\002\024\003\000\002\024\003\000" +
    "\002\015\003\000\002\015\005\000\002\015\007\000\002" +
    "\015\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\003\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\031\006\000\002\046\006\000\002\040\005\000\002\040" +
    "\005\000\002\040\003\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\012\005\000\002\012\005\000\002\012\003\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\042\005\000\002\042\003" +
    "\000\002\042\003\000\002\011\005\000\002\011\003\000" +
    "\002\011\003\000\002\037\015\000\002\047\015\000\002" +
    "\036\011\000\002\035\011\000\002\035\015\000\002\017" +
    "\003\000\002\030\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\004\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\004\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\004" +
    "\000\002\044\003\000\002\044\004\000\002\034\003\000" +
    "\002\034\004\000\002\043\003\000\002\043\004\000\002" +
    "\032\003\000\002\032\004\000\002\004\011\000\002\004" +
    "\012\000\002\004\010\000\002\004\011\000\002\004\004" +
    "\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0105\000\020\003\011\004\020\006\004\007\015\010" +
    "\014\031\017\046\012\001\002\000\010\031\131\046\137" +
    "\047\140\001\002\000\004\002\u0106\001\002\000\004\002" +
    "\ufffd\001\002\000\006\003\177\005\200\001\002\000\010" +
    "\002\uffff\017\077\020\100\001\002\000\004\043\175\001" +
    "\002\000\036\002\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6" +
    "\023\130\024\uffe6\025\uffe6\026\uffe6\027\uffe6\032\uffe6\033" +
    "\uffe6\034\uffe6\035\uffe6\001\002\000\040\002\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\022\uffd1\024\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\032\056\033\057\034\061\035\060\036\uffd1\037\uffd1" +
    "\001\002\000\030\002\uffcf\017\uffcf\020\uffcf\021\uffcf\022" +
    "\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\036\uffcf\037\uffcf" +
    "\001\002\000\030\002\uffd0\017\uffd0\020\uffd0\021\uffd0\022" +
    "\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\036\uffd0\037\uffd0" +
    "\001\002\000\030\002\uffd8\017\uffd8\020\uffd8\021\114\022" +
    "\117\024\121\025\120\026\115\027\116\036\uffd8\037\uffd8" +
    "\001\002\000\040\002\uffe7\017\uffe7\020\uffe7\021\uffe7\022" +
    "\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\037\uffe7\001\002\000\004\042" +
    "\021\001\002\000\014\003\030\011\027\012\032\013\025" +
    "\043\024\001\002\000\012\011\ufff7\012\ufff7\013\ufff7\043" +
    "\ufff7\001\002\000\012\011\027\012\032\013\025\043\110" +
    "\001\002\000\006\003\ufffb\005\ufffb\001\002\000\004\046" +
    "\074\001\002\000\012\011\ufff9\012\ufff9\013\ufff9\043\ufff9" +
    "\001\002\000\004\046\052\001\002\000\004\037\050\001" +
    "\002\000\012\011\ufff8\012\ufff8\013\ufff8\043\ufff8\001\002" +
    "\000\004\046\033\001\002\000\010\023\046\036\uffe4\037" +
    "\uffe4\001\002\000\006\036\035\037\036\001\002\000\004" +
    "\046\037\001\002\000\012\011\ufff1\012\ufff1\013\ufff1\043" +
    "\ufff1\001\002\000\010\023\040\036\uffe2\037\uffe2\001\002" +
    "\000\006\046\042\047\043\001\002\000\010\032\044\036" +
    "\uffe3\037\uffe3\001\002\000\010\032\uffdf\036\uffdf\037\uffdf" +
    "\001\002\000\010\032\uffe0\036\uffe0\037\uffe0\001\002\000" +
    "\006\046\042\047\043\001\002\000\010\032\uffe1\036\uffe1" +
    "\037\uffe1\001\002\000\006\046\042\047\043\001\002\000" +
    "\010\032\044\036\uffe5\037\uffe5\001\002\000\012\011\ufff3" +
    "\012\ufff3\013\ufff3\043\ufff3\001\002\000\006\036\066\037" +
    "\067\001\002\000\010\023\053\036\uffee\037\uffee\001\002" +
    "\000\006\031\017\046\055\001\002\000\016\032\056\033" +
    "\057\034\061\035\060\036\uffef\037\uffef\001\002\000\040" +
    "\002\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6" +
    "\036\uffe6\037\uffe6\001\002\000\006\031\017\046\055\001" +
    "\002\000\006\031\017\046\055\001\002\000\006\031\017" +
    "\046\055\001\002\000\006\031\017\046\055\001\002\000" +
    "\040\002\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\024\uffe9" +
    "\025\uffe9\026\uffe9\027\uffe9\032\uffe9\033\uffe9\034\uffe9\035" +
    "\uffe9\036\uffe9\037\uffe9\001\002\000\040\002\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\024\uffe8\025\uffe8\026\uffe8\027" +
    "\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8" +
    "\001\002\000\040\002\uffea\017\uffea\020\uffea\021\uffea\022" +
    "\uffea\024\uffea\025\uffea\026\uffea\027\uffea\032\uffea\033\uffea" +
    "\034\061\035\060\036\uffea\037\uffea\001\002\000\040\002" +
    "\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\032\uffeb\033\uffeb\034\061\035\060\036" +
    "\uffeb\037\uffeb\001\002\000\004\046\070\001\002\000\012" +
    "\011\ufff2\012\ufff2\013\ufff2\043\ufff2\001\002\000\010\023" +
    "\071\036\uffec\037\uffec\001\002\000\006\031\017\046\055" +
    "\001\002\000\016\032\056\033\057\034\061\035\060\036" +
    "\uffed\037\uffed\001\002\000\006\036\103\037\104\001\002" +
    "\000\010\023\075\036\uffde\037\uffde\001\002\000\012\007" +
    "\015\010\014\031\017\046\055\001\002\000\012\017\077" +
    "\020\100\036\uffdd\037\uffdd\001\002\000\012\007\015\010" +
    "\014\031\017\046\055\001\002\000\012\007\015\010\014" +
    "\031\017\046\055\001\002\000\014\002\uffd9\017\uffd9\020" +
    "\uffd9\036\uffd9\037\uffd9\001\002\000\014\002\uffda\017\uffda" +
    "\020\uffda\036\uffda\037\uffda\001\002\000\004\046\105\001" +
    "\002\000\012\011\ufff0\012\ufff0\013\ufff0\043\ufff0\001\002" +
    "\000\010\023\106\036\uffdb\037\uffdb\001\002\000\012\007" +
    "\015\010\014\031\017\046\055\001\002\000\012\017\077" +
    "\020\100\036\uffdc\037\uffdc\001\002\000\006\003\ufffc\005" +
    "\ufffc\001\002\000\012\011\ufff5\012\ufff5\013\ufff5\043\ufff5" +
    "\001\002\000\012\011\ufff6\012\ufff6\013\ufff6\043\ufff6\001" +
    "\002\000\012\011\ufff4\012\ufff4\013\ufff4\043\ufff4\001\002" +
    "\000\012\007\015\010\014\031\017\046\055\001\002\000" +
    "\012\007\015\010\014\031\017\046\055\001\002\000\012" +
    "\007\015\010\014\031\017\046\055\001\002\000\012\007" +
    "\015\010\014\031\017\046\055\001\002\000\012\007\015" +
    "\010\014\031\017\046\055\001\002\000\012\007\015\010" +
    "\014\031\017\046\055\001\002\000\030\002\uffd4\017\uffd4" +
    "\020\uffd4\021\uffd4\022\uffd4\024\uffd4\025\uffd4\026\uffd4\027" +
    "\uffd4\036\uffd4\037\uffd4\001\002\000\030\002\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\022\uffd3\024\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\036\uffd3\037\uffd3\001\002\000\030\002\uffd6\017\uffd6" +
    "\020\uffd6\021\uffd6\022\uffd6\024\uffd6\025\uffd6\026\uffd6\027" +
    "\uffd6\036\uffd6\037\uffd6\001\002\000\030\002\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\024\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\036\uffd2\037\uffd2\001\002\000\030\002\uffd5\017\uffd5" +
    "\020\uffd5\021\uffd5\022\uffd5\024\uffd5\025\uffd5\026\uffd5\027" +
    "\uffd5\036\uffd5\037\uffd5\001\002\000\030\002\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\024\uffd7\025\uffd7\026\uffd7\027" +
    "\uffd7\036\uffd7\037\uffd7\001\002\000\014\007\135\010\132" +
    "\031\131\046\137\047\140\001\002\000\044\002\uffba\017" +
    "\uffba\020\uffba\021\uffba\022\uffba\024\uffba\025\uffba\026\uffba" +
    "\027\uffba\030\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036" +
    "\uffba\037\uffba\045\uffba\001\002\000\026\017\uffc1\020\uffc1" +
    "\021\uffc1\022\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\037" +
    "\uffc1\045\uffc1\001\002\000\004\037\174\001\002\000\026" +
    "\017\154\020\163\021\155\022\160\024\162\025\161\026" +
    "\156\027\157\037\uffca\045\uffca\001\002\000\026\017\uffc2" +
    "\020\uffc2\021\uffc2\022\uffc2\024\uffc2\025\uffc2\026\uffc2\027" +
    "\uffc2\037\uffc2\045\uffc2\001\002\000\040\017\uffc3\020\uffc3" +
    "\021\uffc3\022\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030" +
    "\145\032\142\033\141\034\144\035\143\037\uffc3\045\uffc3" +
    "\001\002\000\044\002\uffb9\017\uffb9\020\uffb9\021\uffb9\022" +
    "\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\032\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\045\uffb9\001" +
    "\002\000\044\002\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8" +
    "\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\032\uffb8\033" +
    "\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\045\uffb8\001\002" +
    "\000\010\031\131\046\137\047\140\001\002\000\010\031" +
    "\131\046\137\047\140\001\002\000\010\031\131\046\137" +
    "\047\140\001\002\000\010\031\131\046\137\047\140\001" +
    "\002\000\006\031\146\046\147\001\002\000\044\002\uffbc" +
    "\017\uffbc\020\uffbc\021\uffbc\022\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc" +
    "\036\uffbc\037\uffbc\045\uffbc\001\002\000\044\002\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\022\uffbb\024\uffbb\025\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036" +
    "\uffbb\037\uffbb\045\uffbb\001\002\000\044\002\uffbe\017\uffbe" +
    "\020\uffbe\021\uffbe\022\uffbe\024\uffbe\025\uffbe\026\uffbe\027" +
    "\uffbe\030\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe" +
    "\037\uffbe\045\uffbe\001\002\000\044\002\uffbd\017\uffbd\020" +
    "\uffbd\021\uffbd\022\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd" +
    "\030\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\045\uffbd\001\002\000\044\002\uffc0\017\uffc0\020\uffc0" +
    "\021\uffc0\022\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030" +
    "\uffc0\032\uffc0\033\uffc0\034\144\035\143\036\uffc0\037\uffc0" +
    "\045\uffc0\001\002\000\044\002\uffbf\017\uffbf\020\uffbf\021" +
    "\uffbf\022\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\032\uffbf\033\uffbf\034\144\035\143\036\uffbf\037\uffbf\045" +
    "\uffbf\001\002\000\014\007\135\010\132\031\131\046\137" +
    "\047\140\001\002\000\014\007\135\010\132\031\131\046" +
    "\137\047\140\001\002\000\014\007\135\010\132\031\131" +
    "\046\137\047\140\001\002\000\014\007\135\010\132\031" +
    "\131\046\137\047\140\001\002\000\014\007\135\010\132" +
    "\031\131\046\137\047\140\001\002\000\014\007\135\010" +
    "\132\031\131\046\137\047\140\001\002\000\014\007\135" +
    "\010\132\031\131\046\137\047\140\001\002\000\014\007" +
    "\135\010\132\031\131\046\137\047\140\001\002\000\022" +
    "\021\155\022\160\024\162\025\161\026\156\027\157\037" +
    "\uffcb\045\uffcb\001\002\000\026\017\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\037\uffc6\045" +
    "\uffc6\001\002\000\026\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\024\uffc5\025\uffc5\026\uffc5\027\uffc5\037\uffc5\045\uffc5\001" +
    "\002\000\026\017\uffc8\020\uffc8\021\uffc8\022\uffc8\024\uffc8" +
    "\025\uffc8\026\uffc8\027\uffc8\037\uffc8\045\uffc8\001\002\000" +
    "\026\017\uffc4\020\uffc4\021\uffc4\022\uffc4\024\uffc4\025\uffc4" +
    "\026\uffc4\027\uffc4\037\uffc4\045\uffc4\001\002\000\026\017" +
    "\uffc7\020\uffc7\021\uffc7\022\uffc7\024\uffc7\025\uffc7\026\uffc7" +
    "\027\uffc7\037\uffc7\045\uffc7\001\002\000\026\017\uffc9\020" +
    "\uffc9\021\uffc9\022\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9" +
    "\037\uffc9\045\uffc9\001\002\000\022\021\155\022\160\024" +
    "\162\025\161\026\156\027\157\037\uffcc\045\uffcc\001\002" +
    "\000\020\002\uffce\003\uffce\006\uffce\014\uffce\016\uffce\043" +
    "\uffce\046\uffce\001\002\000\006\003\ufffa\005\ufffa\001\002" +
    "\000\006\002\000\005\376\001\002\000\004\043\375\001" +
    "\002\000\004\044\201\001\002\000\004\046\203\001\002" +
    "\000\004\045\204\001\002\000\004\045\uff79\001\002\000" +
    "\004\042\205\001\002\000\016\003\220\006\212\014\207" +
    "\016\210\043\214\046\217\001\002\000\016\003\uff80\006" +
    "\uff80\014\uff80\016\uff80\043\uff80\046\uff80\001\002\000\004" +
    "\044\350\001\002\000\004\044\250\001\002\000\016\003" +
    "\uff95\006\uff95\014\uff95\016\uff95\043\uff95\046\uff95\001\002" +
    "\000\004\044\225\001\002\000\016\003\uff93\006\uff93\014" +
    "\uff93\016\uff93\043\uff93\046\uff93\001\002\000\006\002\uff7c" +
    "\005\uff7c\001\002\000\016\003\uff92\006\uff92\014\uff92\016" +
    "\uff92\043\uff92\046\uff92\001\002\000\016\003\uff94\006\uff94" +
    "\014\uff94\016\uff94\043\uff94\046\uff94\001\002\000\004\023" +
    "\130\001\002\000\004\037\224\001\002\000\016\003\220" +
    "\006\212\014\207\016\210\043\223\046\217\001\002\000" +
    "\016\003\uff7f\006\uff7f\014\uff7f\016\uff7f\043\uff7f\046\uff7f" +
    "\001\002\000\006\002\uff7e\005\uff7e\001\002\000\016\003" +
    "\uff91\006\uff91\014\uff91\016\uff91\043\uff91\046\uff91\001\002" +
    "\000\010\031\131\046\230\047\231\001\002\000\004\036" +
    "\234\001\002\000\014\030\145\032\232\033\141\034\144" +
    "\035\143\001\002\000\016\030\uffb9\032\uffb9\033\uffb9\034" +
    "\uffb9\035\uffb9\036\uffa1\001\002\000\016\030\uffb8\032\uffb8" +
    "\033\uffb8\034\uffb8\035\uffb8\036\uffa0\001\002\000\010\031" +
    "\131\046\137\047\140\001\002\000\016\030\uffc0\032\uffc0" +
    "\033\uffc0\034\144\035\143\036\uffa2\001\002\000\006\046" +
    "\235\047\237\001\002\000\006\032\uff9e\036\uff9e\001\002" +
    "\000\006\032\240\036\241\001\002\000\006\032\uff9d\036" +
    "\uff9d\001\002\000\006\046\235\047\237\001\002\000\010" +
    "\031\131\046\137\047\140\001\002\000\016\030\145\032" +
    "\142\033\141\034\144\035\143\036\243\001\002\000\010" +
    "\031\131\046\137\047\140\001\002\000\016\030\145\032" +
    "\142\033\141\034\144\035\143\045\245\001\002\000\004" +
    "\037\246\001\002\000\016\003\uff9c\006\uff9c\014\uff9c\016" +
    "\uff9c\043\uff9c\046\uff9c\001\002\000\006\032\uff9f\036\uff9f" +
    "\001\002\000\014\007\256\010\255\031\260\046\254\047" +
    "\252\001\002\000\040\017\uffae\020\uffae\021\uffae\022\uffae" +
    "\024\uffae\025\uffae\026\uffae\027\uffae\030\314\032\307\033" +
    "\310\034\313\035\312\037\uffae\045\uffae\001\002\000\042" +
    "\017\uffa3\020\uffa3\021\uffa3\022\uffa3\024\uffa3\025\uffa3\026" +
    "\uffa3\027\uffa3\030\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3" +
    "\036\uffa3\037\uffa3\045\uffa3\001\002\000\026\017\330\020" +
    "\336\021\331\022\332\024\337\025\335\026\333\027\334" +
    "\037\uffb5\045\uffb5\001\002\000\042\017\uffa4\020\uffa4\021" +
    "\uffa4\022\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4" +
    "\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\045" +
    "\uffa4\001\002\000\026\017\uffac\020\uffac\021\uffac\022\uffac" +
    "\024\uffac\025\uffac\026\uffac\027\uffac\037\uffac\045\uffac\001" +
    "\002\000\026\017\uffad\020\uffad\021\uffad\022\uffad\024\uffad" +
    "\025\uffad\026\uffad\027\uffad\037\uffad\045\uffad\001\002\000" +
    "\004\045\262\001\002\000\042\017\uffa5\020\uffa5\021\uffa5" +
    "\022\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\032" +
    "\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\045\uffa5" +
    "\001\002\000\004\045\uff96\001\002\000\004\040\263\001" +
    "\002\000\014\003\274\006\270\014\207\016\210\046\273" +
    "\001\002\000\016\003\274\006\270\014\207\016\210\041" +
    "\326\046\273\001\002\000\016\003\uff86\006\uff86\014\uff86" +
    "\016\uff86\041\uff86\046\uff86\001\002\000\016\003\uff8b\006" +
    "\uff8b\014\uff8b\016\uff8b\041\uff8b\046\uff8b\001\002\000\016" +
    "\003\uff88\006\uff88\014\uff88\016\uff88\041\uff88\046\uff88\001" +
    "\002\000\004\044\301\001\002\000\016\003\uff89\006\uff89" +
    "\014\uff89\016\uff89\041\uff89\046\uff89\001\002\000\016\003" +
    "\uff8a\006\uff8a\014\uff8a\016\uff8a\041\uff8a\046\uff8a\001\002" +
    "\000\004\023\276\001\002\000\004\037\275\001\002\000" +
    "\016\003\uff87\006\uff87\014\uff87\016\uff87\041\uff87\046\uff87" +
    "\001\002\000\014\007\256\010\255\031\260\046\254\047" +
    "\252\001\002\000\004\037\300\001\002\000\016\003\uffcd" +
    "\006\uffcd\014\uffcd\016\uffcd\041\uffcd\046\uffcd\001\002\000" +
    "\010\031\131\046\230\047\231\001\002\000\004\036\303" +
    "\001\002\000\006\046\235\047\237\001\002\000\006\032" +
    "\240\036\305\001\002\000\010\031\260\046\254\047\252" +
    "\001\002\000\016\030\314\032\307\033\310\034\313\035" +
    "\312\036\311\001\002\000\010\031\260\046\254\047\252" +
    "\001\002\000\010\031\260\046\254\047\252\001\002\000" +
    "\010\031\260\046\254\047\252\001\002\000\010\031\260" +
    "\046\254\047\252\001\002\000\010\031\260\046\254\047" +
    "\252\001\002\000\006\031\315\046\316\001\002\000\042" +
    "\017\uffa7\020\uffa7\021\uffa7\022\uffa7\024\uffa7\025\uffa7\026" +
    "\uffa7\027\uffa7\030\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7" +
    "\036\uffa7\037\uffa7\045\uffa7\001\002\000\042\017\uffa6\020" +
    "\uffa6\021\uffa6\022\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6" +
    "\030\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037" +
    "\uffa6\045\uffa6\001\002\000\042\017\uffa9\020\uffa9\021\uffa9" +
    "\022\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\032" +
    "\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\045\uffa9" +
    "\001\002\000\042\017\uffa8\020\uffa8\021\uffa8\022\uffa8\024" +
    "\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\032\uffa8\033\uffa8" +
    "\034\uffa8\035\uffa8\036\uffa8\037\uffa8\045\uffa8\001\002\000" +
    "\016\030\314\032\307\033\310\034\313\035\312\045\322" +
    "\001\002\000\004\037\323\001\002\000\016\003\uff9b\006" +
    "\uff9b\014\uff9b\016\uff9b\041\uff9b\046\uff9b\001\002\000\042" +
    "\017\uffaa\020\uffaa\021\uffaa\022\uffaa\024\uffaa\025\uffaa\026" +
    "\uffaa\027\uffaa\030\uffaa\032\uffaa\033\uffaa\034\313\035\312" +
    "\036\uffaa\037\uffaa\045\uffaa\001\002\000\042\017\uffab\020" +
    "\uffab\021\uffab\022\uffab\024\uffab\025\uffab\026\uffab\027\uffab" +
    "\030\uffab\032\uffab\033\uffab\034\313\035\312\036\uffab\037" +
    "\uffab\045\uffab\001\002\000\020\003\uff9a\006\uff9a\014\uff9a" +
    "\016\uff9a\041\uff9a\043\uff9a\046\uff9a\001\002\000\016\003" +
    "\uff85\006\uff85\014\uff85\016\uff85\041\uff85\046\uff85\001\002" +
    "\000\014\007\256\010\255\031\260\046\254\047\252\001" +
    "\002\000\014\007\256\010\255\031\260\046\254\047\252" +
    "\001\002\000\014\007\256\010\255\031\260\046\254\047" +
    "\252\001\002\000\014\007\256\010\255\031\260\046\254" +
    "\047\252\001\002\000\014\007\256\010\255\031\260\046" +
    "\254\047\252\001\002\000\014\007\256\010\255\031\260" +
    "\046\254\047\252\001\002\000\014\007\256\010\255\031" +
    "\260\046\254\047\252\001\002\000\014\007\256\010\255" +
    "\031\260\046\254\047\252\001\002\000\026\017\uffb1\020" +
    "\uffb1\021\uffb1\022\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1" +
    "\037\uffb1\045\uffb1\001\002\000\022\021\331\022\332\024" +
    "\337\025\335\026\333\027\334\037\uffb6\045\uffb6\001\002" +
    "\000\026\017\uffb0\020\uffb0\021\uffb0\022\uffb0\024\uffb0\025" +
    "\uffb0\026\uffb0\027\uffb0\037\uffb0\045\uffb0\001\002\000\026" +
    "\017\uffaf\020\uffaf\021\uffaf\022\uffaf\024\uffaf\025\uffaf\026" +
    "\uffaf\027\uffaf\037\uffaf\045\uffaf\001\002\000\026\017\uffb2" +
    "\020\uffb2\021\uffb2\022\uffb2\024\uffb2\025\uffb2\026\uffb2\027" +
    "\uffb2\037\uffb2\045\uffb2\001\002\000\026\017\uffb3\020\uffb3" +
    "\021\uffb3\022\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\037" +
    "\uffb3\045\uffb3\001\002\000\026\017\uffb4\020\uffb4\021\uffb4" +
    "\022\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\037\uffb4\045" +
    "\uffb4\001\002\000\022\021\331\022\332\024\337\025\335" +
    "\026\333\027\334\037\uffb7\045\uffb7\001\002\000\014\007" +
    "\135\010\132\031\131\046\137\047\140\001\002\000\004" +
    "\045\uff97\001\002\000\004\045\353\001\002\000\004\040" +
    "\354\001\002\000\014\003\362\006\270\014\207\016\210" +
    "\046\273\001\002\000\016\003\uff90\006\uff90\014\uff90\016" +
    "\uff90\041\uff90\046\uff90\001\002\000\016\003\uff8d\006\uff8d" +
    "\014\uff8d\016\uff8d\041\uff8d\046\uff8d\001\002\000\016\003" +
    "\uff8e\006\uff8e\014\uff8e\016\uff8e\041\uff8e\046\uff8e\001\002" +
    "\000\016\003\uff8f\006\uff8f\014\uff8f\016\uff8f\041\uff8f\046" +
    "\uff8f\001\002\000\016\003\uff84\006\uff84\014\uff84\016\uff84" +
    "\041\uff84\046\uff84\001\002\000\004\037\374\001\002\000" +
    "\016\003\362\006\270\014\207\016\210\041\364\046\273" +
    "\001\002\000\022\003\uff99\006\uff99\014\uff99\015\366\016" +
    "\uff99\041\uff99\043\uff99\046\uff99\001\002\000\016\003\uff83" +
    "\006\uff83\014\uff83\016\uff83\041\uff83\046\uff83\001\002\000" +
    "\004\040\367\001\002\000\014\003\362\006\270\014\207" +
    "\016\210\046\273\001\002\000\016\003\uff82\006\uff82\014" +
    "\uff82\016\uff82\041\uff82\046\uff82\001\002\000\016\003\362" +
    "\006\270\014\207\016\210\041\372\046\273\001\002\000" +
    "\020\003\uff98\006\uff98\014\uff98\016\uff98\041\uff98\043\uff98" +
    "\046\uff98\001\002\000\016\003\uff81\006\uff81\014\uff81\016" +
    "\uff81\041\uff81\046\uff81\001\002\000\016\003\uff8c\006\uff8c" +
    "\014\uff8c\016\uff8c\041\uff8c\046\uff8c\001\002\000\006\002" +
    "\uff7a\005\uff7a\001\002\000\004\044\377\001\002\000\004" +
    "\046\203\001\002\000\004\045\u0101\001\002\000\004\042" +
    "\u0102\001\002\000\016\003\220\006\212\014\207\016\210" +
    "\043\u0103\046\217\001\002\000\006\002\uff7b\005\uff7b\001" +
    "\002\000\016\003\220\006\212\014\207\016\210\043\u0105" +
    "\046\217\001\002\000\006\002\uff7d\005\uff7d\001\002\000" +
    "\004\002\001\001\002\000\016\002\ufffe\030\145\032\142" +
    "\033\141\034\144\035\143\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0105\000\016\002\004\005\006\016\015\022\012\025" +
    "\007\031\005\001\001\000\004\023\u0106\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\022" +
    "\006\025\007\030\010\021\001\001\000\002\001\001\000" +
    "\010\006\111\007\110\010\112\001\001\000\002\001\001" +
    "\000\004\015\072\001\001\000\002\001\001\000\004\013" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\044\001\001\000\002\001\001" +
    "\000\004\024\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\064\001\001\000\004\022\063\001\001\000\004\022\062" +
    "\001\001\000\004\022\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\015\022\012\025\075\001\001\000" +
    "\002\001\001\000\010\016\015\022\012\025\101\001\001" +
    "\000\010\016\015\022\012\025\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\015\022\012\025\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\126\022" +
    "\012\001\001\000\006\016\125\022\012\001\001\000\006" +
    "\016\124\022\012\001\001\000\006\016\123\022\012\001" +
    "\001\000\006\016\122\022\012\001\001\000\006\016\121" +
    "\022\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\023\135\026\133\040\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\152\001\001\000\004" +
    "\023\151\001\001\000\004\023\150\001\001\000\004\023" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\135\026\172\001\001" +
    "\000\006\023\135\026\171\001\001\000\006\023\135\026" +
    "\170\001\001\000\006\023\135\026\167\001\001\000\006" +
    "\023\135\026\166\001\001\000\006\023\135\026\165\001" +
    "\001\000\006\023\135\026\164\001\001\000\006\023\135" +
    "\026\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\031\214" +
    "\032\220\033\205\035\210\036\215\037\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\031\214\033\221\035\210\036" +
    "\215\037\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\226\042\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\232\001\001\000\002\001\001\000" +
    "\004\011\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\246\001\001\000\004\023" +
    "\241\001\001\000\002\001\001\000\004\023\243\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\260\020\252\021\250\030\256" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\035\265\036\271\044\263\045\264" +
    "\046\266\047\270\001\001\000\014\035\265\036\271\045" +
    "\326\046\266\047\270\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\276\020\252\021\250\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\226" +
    "\042\301\001\001\000\002\001\001\000\004\011\303\001" +
    "\001\000\002\001\001\000\004\021\305\001\001\000\002" +
    "\001\001\000\004\021\324\001\001\000\004\021\323\001" +
    "\001\000\004\021\320\001\001\000\004\021\317\001\001" +
    "\000\004\021\316\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\346\021\250\001\001\000\006\020" +
    "\345\021\250\001\001\000\006\020\344\021\250\001\001" +
    "\000\006\020\343\021\250\001\001\000\006\020\342\021" +
    "\250\001\001\000\006\020\341\021\250\001\001\000\006" +
    "\020\340\021\250\001\001\000\006\020\337\021\250\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\351\023\135" +
    "\026\133\040\350\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\027\360\034\362\035\354" +
    "\036\357\046\355\047\356\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\027\364\035\354\036" +
    "\357\046\355\047\356\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\027\367\035\354\036" +
    "\357\043\370\046\355\047\356\001\001\000\002\001\001" +
    "\000\014\027\372\035\354\036\357\046\355\047\356\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\377\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\031\214" +
    "\032\u0103\033\205\035\210\036\215\037\212\001\001\000" +
    "\002\001\001\000\014\031\214\033\221\035\210\036\215" +
    "\037\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxPintar$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxPintar$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxPintar$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ManejadorSintactico ms = ManejadorSintactico.getInstancia();
    private ManejadorPintar mp = ManejadorPintar.getManejadorPintar();
    private ManejadorIfWhile iw = ManejadorIfWhile.getInstancia();
    private boolean bandera;
    private boolean primerBolean;
    private String aux = "";
    private Principal principal;

    public void setPrincipal(Principal principal) {
        this.principal = principal;
    }

    public String getAux() {
        return aux;
    }

    public void setAux(String aux) {
        this.aux += aux;
    }    
    
    public void clean(){
        this.aux = "";
    }

    public SintaxPintar(LexicoPintar lexer) { 
        super(lexer);   
        /*         ManejadorSintactico.getSimbolosLnz().getSimbolos().clear(); */
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println("ERROR Lexico Tipo: " + tipo + "\t Mensaje: " + mensaje + "\tAcción: ERROR\n");
    }

    @Override
    public void syntax_error(Symbol s){
        try {
            if (s != null) {
                principal.addErrores(
                    "\nError de Sintaxis: " 
                    + "\n\tLinea #:                 << " + (s.right + 1) + " >>"
                    + "\n\tColumna #                << " + (((s.left)/(s.right)) + 1) + " >>"
                    + "\n\tToken NO Reconocido:     << " + (s.value) + " >>" );
            }
        } catch (Exception e) {
            System.out.println("Error " + e.toString());
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxPintar$actions {
  private final SintaxPintar parser;

  /** Constructor */
  CUP$SintaxPintar$actions(SintaxPintar parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxPintar$do_action_part00000000(
    int                        CUP$SintaxPintar$act_num,
    java_cup.runtime.lr_parser CUP$SintaxPintar$parser,
    java.util.Stack            CUP$SintaxPintar$stack,
    int                        CUP$SintaxPintar$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxPintar$result;

      /* select the action based on the action number */
      switch (CUP$SintaxPintar$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)).value;
		RESULT = start_val;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxPintar$parser.done_parsing();
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= estructura_vars estructura_instrucciones 
            {
              Object RESULT =null;
		System.out.println("Aceptado\n"); ms.imp(); System.out.println("\t"); ms.imprimir();
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= expresion_boolean 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		iw.setCondicional((boolean) e);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= Pintar expresion_int_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		iw.setValor(e);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= declaracion_instr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;

              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // estructura_vars ::= Vars LlaveA declaracion_vars LlaveC 
            {
              Object RESULT =null;

              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("estructura_vars",3, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // estructura_vars ::= Vars LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("estructura_vars",3, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // estructura_vars ::= error LlaveC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("estructura_vars",3, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion_vars ::= estructura_int 
            {
              Object RESULT =null;

              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_vars",1, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion_vars ::= estructura_string 
            {
              Object RESULT =null;

              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_vars",1, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion_vars ::= estructura_boolean 
            {
              Object RESULT =null;

              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_vars",1, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion_vars ::= declaracion_vars estructura_int 
            {
              Object RESULT =null;

              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_vars",1, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion_vars ::= declaracion_vars estructura_string 
            {
              Object RESULT =null;

              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_vars",1, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion_vars ::= declaracion_vars estructura_boolean 
            {
              Object RESULT =null;

              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_vars",1, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion_vars ::= error PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_vars",1, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // estructura_int ::= Int declaracion_int PuntoComa 
            {
              Object RESULT =null;

              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("estructura_int",4, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // estructura_string ::= String declaracion_string PuntoComa 
            {
              Object RESULT =null;

              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("estructura_string",5, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // estructura_boolean ::= Boolean declaracion_boolean PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)).value;

              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("estructura_boolean",6, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracion_int ::= Identificador Igual expresion_int 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		ms.asignarValorIdInt(a.toString(), e, aleft, aright, false);;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_int",9, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracion_int ::= Identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		ms.asignarValorIdInt(a.toString(), null, aleft, aright, true);;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_int",9, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracion_int ::= declaracion_int Coma Identificador Igual expresion_int 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		ms.asignarValorIdInt(a.toString(), e, aleft, aright, false);;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_int",9, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracion_int ::= declaracion_int Coma Identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		ms.asignarValorIdInt(a.toString(), null, aleft, aright, true);;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_int",9, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion_int ::= expresion_int Mas expresion_int 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = ms.realizarOperaciones(ms.comrpobarInt(a, aleft, aright), ms.comrpobarInt(b, bleft, bright), aleft, aright, bleft, bright, 1);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_int",16, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion_int ::= expresion_int Menos expresion_int 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = ms.realizarOperaciones(ms.comrpobarInt(a, aleft, aright), ms.comrpobarInt(b, bleft, bright), aleft, aright, bleft, bright, 2);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_int",16, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion_int ::= expresion_int Por expresion_int 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = ms.realizarOperaciones(ms.comrpobarInt(a, aleft, aright), ms.comrpobarInt(b, bleft, bright), aleft, aright, bleft, bright, 3);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_int",16, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion_int ::= expresion_int Div expresion_int 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = ms.realizarOperaciones(ms.comrpobarInt(a, aleft, aright), ms.comrpobarInt(b, bleft, bright), aleft, aright, bleft, bright, 4);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_int",16, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion_int ::= Numero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = Integer.parseInt(e.toString());
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_int",16, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion_int ::= Identificador 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = ms.buscarIdEnTabla(e, eleft, eright);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_int",16, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracion_string ::= Identificador Igual expresion_string 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		ms.asignarValorIdString(a.toString(), e, aleft, aright, false);;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_string",10, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracion_string ::= Identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		ms.asignarValorIdString(a.toString(), null, aleft, aright, true);;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_string",10, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracion_string ::= declaracion_string Coma Identificador Igual expresion_string 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		ms.asignarValorIdString(a.toString(), e, aleft, aright, false);;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_string",10, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracion_string ::= declaracion_string Coma Identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		ms.asignarValorIdString(a.toString(), null, aleft, aright, true);;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_string",10, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion_string ::= expresion_string Mas expresion_string 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = ms.concatenarCadena(a, b, aleft, aright, bleft, bright);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_string",18, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion_string ::= Cadena 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = e.toString();
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_string",18, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion_string ::= Identificador 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = ms.comprobarString(ms.buscarIdEnTabla(e.toString(), eleft, eright), eleft, eright);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_string",18, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracion_boolean ::= Identificador 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		ms.asignarValorIdBoolean(e, null, eleft, eright, true);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_boolean",11, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracion_boolean ::= Identificador Igual expresion_boolean 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		ms.asignarValorIdBoolean(e.toString(), a, eleft, eright, false);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_boolean",11, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracion_boolean ::= declaracion_boolean Coma Identificador Igual expresion_boolean 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		ms.asignarValorIdBoolean(e.toString(), a, eleft, eright, false);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_boolean",11, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracion_boolean ::= declaracion_boolean Coma Identificador 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		ms.asignarValorIdBoolean(e.toString(), null, eleft, eright, true);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_boolean",11, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion_boolean ::= expresion_boolean And expresion_boolean 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = ms.realizarOperacionesAndOr(a, b, aleft, aright, bleft, bright, 1);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_boolean",19, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion_boolean ::= expresion_boolean Or expresion_boolean 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = ms.realizarOperacionesAndOr(a, b, aleft, aright, bleft, bright, 2);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_boolean",19, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion_boolean ::= expresiones_logicas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = e;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_boolean",19, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresiones_logicas ::= expresiones_logicas Menor expresiones_logicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = ms.realizarOperacionesLogicas(a, b, aleft, aright, bleft, bright, 1);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresiones_logicas",12, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresiones_logicas ::= expresiones_logicas Mayor expresiones_logicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = ms.realizarOperacionesLogicas(a, b, aleft, aright, bleft, bright, 2);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresiones_logicas",12, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresiones_logicas ::= expresiones_logicas IgualIgual expresiones_logicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = ms.realizarOperacionesLogicas(a, b, aleft, aright, bleft, bright, 3);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresiones_logicas",12, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresiones_logicas ::= expresiones_logicas MenorIgual expresiones_logicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = ms.realizarOperacionesLogicas(a, b, aleft, aright, bleft, bright, 4);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresiones_logicas",12, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresiones_logicas ::= expresiones_logicas MayorIgual expresiones_logicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = ms.realizarOperacionesLogicas(a, b, aleft, aright, bleft, bright, 5);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresiones_logicas",12, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresiones_logicas ::= expresiones_logicas MenorMayor expresiones_logicas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = ms.realizarOperacionesLogicas(a, b, aleft, aright, bleft, bright, 6);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresiones_logicas",12, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresiones_logicas ::= expresion_int 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = e;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresiones_logicas",12, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresiones_logicas ::= True 
            {
              Object RESULT =null;
		RESULT = true;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresiones_logicas",12, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresiones_logicas ::= False 
            {
              Object RESULT =null;
		RESULT = false;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresiones_logicas",12, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declaracion_instr ::= Identificador Igual expresion_id_instr PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)).value;
		if(bandera) {RESULT = new Simbolo(mp.comprobarTipoObjeto(a), a, e.toString());} else {ms.asignarVal(e.toString(), a, eleft, eright, bandera);}
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_instr",23, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declaracion_instr_wh ::= Identificador Igual expresion_id_instr_wh PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)).value;
		if(a != null && e != null) {RESULT  = new Simbolo("String", e.toString() + " = " + a.toString() + ";", e.toString());} else {RESULT = null;}
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_instr_wh",36, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion_id_instr ::= expresiones_logicas_p And expresiones_logicas_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = ms.realizarOperacionesAndOrInst(a, e, aleft, aright, eleft, eright, 1);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_id_instr",30, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion_id_instr ::= expresiones_logicas_p Or expresiones_logicas_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = ms.realizarOperacionesAndOrInst(a, e, aleft, aright, eleft, eright, 2);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_id_instr",30, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion_id_instr ::= expresiones_logicas_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = a;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_id_instr",30, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresiones_logicas_p ::= expresiones_logicas_p Menor expresiones_logicas_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = ms.realizarOperacionesBoolean(a, e, aleft, aright, eleft, eright, 1);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresiones_logicas_p",20, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresiones_logicas_p ::= expresiones_logicas_p Mayor expresiones_logicas_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = ms.realizarOperacionesBoolean(a, e, aleft, aright, eleft, eright, 2);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresiones_logicas_p",20, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresiones_logicas_p ::= expresiones_logicas_p IgualIgual expresiones_logicas_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = ms.realizarOperacionesBoolean(a, e, aleft, aright, eleft, eright, 3);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresiones_logicas_p",20, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresiones_logicas_p ::= expresiones_logicas_p MenorIgual expresiones_logicas_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = ms.realizarOperacionesBoolean(a, e, aleft, aright, eleft, eright, 4);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresiones_logicas_p",20, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresiones_logicas_p ::= expresiones_logicas_p MayorIgual expresiones_logicas_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = ms.realizarOperacionesBoolean(a, e, aleft, aright, eleft, eright, 5);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresiones_logicas_p",20, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresiones_logicas_p ::= expresiones_logicas_p MenorMayor expresiones_logicas_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = ms.realizarOperacionesBoolean(a, e, aleft, aright, eleft, eright, 6);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresiones_logicas_p",20, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresiones_logicas_p ::= expresion_int_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = e;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresiones_logicas_p",20, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresiones_logicas_p ::= True 
            {
              Object RESULT =null;
		aux += " true"; RESULT = true;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresiones_logicas_p",20, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresiones_logicas_p ::= False 
            {
              Object RESULT =null;
		aux += " false"; RESULT = false;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresiones_logicas_p",20, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion_int_p ::= expresion_int_p Mas expresion_int_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = ms.realizarOperacionesInstrIP(a, e, aleft, aright, eleft, eright, 1, false);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_int_p",17, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion_int_p ::= expresion_int_p Menos expresion_int_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = ms.realizarOperacionesInstrIP(a, e, aleft, aright, eleft, eright, 2, false);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_int_p",17, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion_int_p ::= expresion_int_p Por expresion_int_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = ms.realizarOperacionesInstrIP(a, e, aleft, aright, eleft, eright, 3, false);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_int_p",17, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion_int_p ::= expresion_int_p Div expresion_int_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = ms.realizarOperacionesInstrIP(a, e, aleft, aright, eleft, eright, 4, false);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_int_p",17, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion_int_p ::= expresion_int_p Punto Numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = ms.realizarOperacionesInstrIP(a, Integer.parseInt(e.toString()), aleft, aright, eleft, eright, 5, false);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_int_p",17, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion_int_p ::= expresion_int_p Punto Identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = ms.realizarOperacionesInstrIP(a, ms.buscarSimbolo(e.toString(), "", eleft, eright, false, true, true), aleft, aright, eleft, eright, 5, false);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_int_p",17, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion_int_p ::= Numero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = Integer.parseInt(e.toString());
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_int_p",17, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion_int_p ::= Identificador 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = ms.buscarSimbolo(e.toString(), "", eleft, eright, true, true, true);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_int_p",17, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion_int_p ::= Cadena 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = e.replaceAll("\"", "");
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_int_p",17, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion_id_instr_wh ::= expresiones_logicas_p_wh And expresiones_logicas_p_wh 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		if(a != null && e != null) {RESULT = a.toString() + " AND " + e.toString();} else {RESULT = null;}
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_id_instr_wh",8, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion_id_instr_wh ::= expresiones_logicas_p_wh Or expresiones_logicas_p_wh 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		if(a != null && e != null) {RESULT = a.toString() + " OR " + e.toString();} else {RESULT = null;}
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_id_instr_wh",8, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion_id_instr_wh ::= expresiones_logicas_p_wh 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = a;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_id_instr_wh",8, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresiones_logicas_p_wh ::= expresiones_logicas_p_wh Menor expresiones_logicas_p_wh 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		if(a != null && e != null) {RESULT = a.toString() + " < " + e.toString();} else {RESULT = null;}
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresiones_logicas_p_wh",14, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresiones_logicas_p_wh ::= expresiones_logicas_p_wh Mayor expresiones_logicas_p_wh 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		if(a != null && e != null) {RESULT = a.toString() + " > " + e.toString();} else {RESULT = null;}
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresiones_logicas_p_wh",14, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresiones_logicas_p_wh ::= expresiones_logicas_p_wh IgualIgual expresiones_logicas_p_wh 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		if(a != null && e != null) {RESULT = a.toString() + " == " + e.toString();} else {RESULT = null;}
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresiones_logicas_p_wh",14, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresiones_logicas_p_wh ::= expresiones_logicas_p_wh MenorIgual expresiones_logicas_p_wh 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		if(a != null && e != null) {RESULT = a.toString() + " <= " + e.toString();} else {RESULT = null;}
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresiones_logicas_p_wh",14, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresiones_logicas_p_wh ::= expresiones_logicas_p_wh MayorIgual expresiones_logicas_p_wh 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		if(a != null && e != null) {RESULT = a.toString() + " >= " + e.toString();} else {RESULT = null;}
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresiones_logicas_p_wh",14, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresiones_logicas_p_wh ::= expresiones_logicas_p_wh MenorMayor expresiones_logicas_p_wh 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		if(a != null && e != null) {RESULT = a.toString() + " <> " + e.toString();} else {RESULT = null;}
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresiones_logicas_p_wh",14, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresiones_logicas_p_wh ::= expresion_int_p_wh 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = e;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresiones_logicas_p_wh",14, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresiones_logicas_p_wh ::= True 
            {
              Object RESULT =null;
		RESULT = "true";
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresiones_logicas_p_wh",14, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresiones_logicas_p_wh ::= False 
            {
              Object RESULT =null;
		RESULT = "false";
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresiones_logicas_p_wh",14, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion_int_p_wh ::= expresion_int_p_wh Mas expresion_int_p_wh 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		if(a != null && e != null) {RESULT = a.toString() + " + " + e.toString();} else {RESULT = null;}
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_int_p_wh",15, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion_int_p_wh ::= expresion_int_p_wh Menos expresion_int_p_wh 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		if(a != null && e != null) {RESULT = a.toString() + " - " + e.toString();} else {RESULT = null;}
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_int_p_wh",15, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion_int_p_wh ::= expresion_int_p_wh Por expresion_int_p_wh 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		if(a != null && e != null) {RESULT = a.toString() + " / " + e.toString();} else {RESULT = null;}
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_int_p_wh",15, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion_int_p_wh ::= expresion_int_p_wh Div expresion_int_p_wh 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		if(a != null && e != null) {RESULT = a.toString() + " * " + e.toString();} else {RESULT = null;}
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_int_p_wh",15, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion_int_p_wh ::= expresion_int_p_wh Punto Numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		if(a != null && e != null) {RESULT = a.toString() + " .. " + e.toString();} else {RESULT = null;}
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_int_p_wh",15, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion_int_p_wh ::= expresion_int_p_wh Punto Identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		if(a != null && e != null) {RESULT = a.toString() + " .. " + e.toString();} else {RESULT = null;}
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_int_p_wh",15, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion_int_p_wh ::= Numero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = Integer.parseInt(e.toString());
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_int_p_wh",15, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion_int_p_wh ::= Identificador 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		Object o = ms.buscarSimbolo(e.toString(), "", eleft, eright, true, true, true); if(o != null) {RESULT = e.toString();} else {RESULT = null;}
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_int_p_wh",15, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion_int_p_wh ::= Cadena 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = e.replaceAll("\"", "");
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_int_p_wh",15, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion_id_pintar ::= expresion_int_p Mas expresion_int_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = mp.buscaColoresId(ms.realizarOperacionesInstrIP(a, e, aleft, aright, eleft, eright, 1, true), "", aleft, aright);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_id_pintar",32, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion_id_pintar ::= Identificador 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = mp.buscaColoresId(ms.buscarSimbolo(e.toString(), "", eleft, eright, true, true, false), e.toString(), eleft, eright);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_id_pintar",32, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion_id_pintar ::= Cadena 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = mp.buscaColoresId(e.toString().replaceAll("\"", ""), e.toString().replaceAll("\"", ""), eleft, eright);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_id_pintar",32, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion_id_img_pintar ::= expresion_id_img_pintar Mas expresion_id_img_pintar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = mp.buscaImgId(ms.realizarOperacionesInstrIP(a, e, aleft, aright, eleft, eright, 1, true), "", aleft, aright);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_id_img_pintar",7, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion_id_img_pintar ::= Identificador 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = mp.buscaImgId(ms.buscarSimbolo(e.toString(), "", eleft, eright, true, true, false), e, eleft, eright);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_id_img_pintar",7, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion_id_img_pintar ::= Cadena 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = mp.buscaImgId(e.toString().replaceAll("\"", ""), e, eleft, eright);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("expresion_id_img_pintar",7, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // estructura_pintar ::= Pintar ParentesisA expresion_id_pintar Coma expresion_id_img_pintar Coma expresion_int_p Coma expresion_int_p ParentesisC PuntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		RESULT = mp.comprobarPintar(mp.buscaColores(a, aleft, aright), mp.buscaImg(b, bleft, bright), c, d, aleft, aright, bleft, bright, cleft, cright, dleft, dright, bandera);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("estructura_pintar",29, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-10)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // estructura_pintar_iw ::= Pintar ParentesisA expresion_id_pintar Coma expresion_id_img_pintar Coma expresion_int_p_wh Coma expresion_int_p_wh ParentesisC PuntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-2)).value;
		RESULT = mp.comprobarPintar(mp.buscaColores(a, aleft, aright), mp.buscaImg(b, bleft, bright), c, d, aleft, aright, bleft, bright, cleft, cright, dleft, dright, bandera);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("estructura_pintar_iw",37, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-10)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // estructura_while ::= While ParentesisA declaracion_asignaciones ParentesisC CorcheteA declaracion_instrucciones_while CorcheteC 
            {
              Object RESULT =null;
		RESULT = ms.removerEstructura();/*bandera = false;*/
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("estructura_while",28, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // estructura_if ::= If ParentesisA declaracion_asignaciones_if ParentesisC CorcheteA declaracion_instrucciones_if_while CorcheteC 
            {
              Object RESULT =null;
		bandera = false; RESULT = ms.removerEstructura();
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("estructura_if",27, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // estructura_if ::= If ParentesisA declaracion_asignaciones_if ParentesisC CorcheteA declaracion_instrucciones_if_while CorcheteC Else CorcheteA declaracion_instrucciones_else CorcheteC 
            {
              Object RESULT =null;
		bandera = false; RESULT = ms.removerEstructura();
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("estructura_if",27, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-10)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // declaracion_asignaciones_if ::= expresion_id_instr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		System.out.println("Aux if " + e); ms.agregarNuevaEstructura(true, e); bandera = true;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_asignaciones_if",13, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // declaracion_asignaciones ::= expresion_id_instr_wh 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		System.out.println("Aux Wh " + e); ms.agregarNuevaEstructura(false, e); bandera = true;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_asignaciones",22, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // declaracion_estructuras ::= estructura_if 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		iw.realizarIfWhile((TablaSimbolos) e);  /*System.out.println(e);*/ /* Aca hay que realizar el if */ bandera = false;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_estructuras",25, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // declaracion_estructuras ::= estructura_while 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		iw.realizarIfWhile((TablaSimbolos) e);  /*System.out.println(e);*/ /* Aca hay que realizar el while */ bandera = false;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_estructuras",25, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // declaracion_estructuras ::= estructura_pintar 
            {
              Object RESULT =null;
		/* Aca se realizo la asignacion ya al pintar en lienzo */
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_estructuras",25, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // declaracion_estructuras ::= declaracion_instr 
            {
              Object RESULT =null;
		/* Aca se realizo la asignacion de las variables */
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_estructuras",25, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // declaracion_estructuras ::= error PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_estructuras",25, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // declaracion_estructuras_if_while ::= estructura_if 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = e;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_estructuras_if_while",21, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // declaracion_estructuras_if_while ::= estructura_while 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = e;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_estructuras_if_while",21, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // declaracion_estructuras_if_while ::= estructura_pintar_iw 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = e;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_estructuras_if_while",21, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // declaracion_estructuras_if_while ::= declaracion_instr_wh 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = e;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_estructuras_if_while",21, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // declaracion_estructuras_if_while ::= error PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_estructuras_if_while",21, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // declaracion_estructuras_while ::= estructura_if 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = e;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_estructuras_while",35, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // declaracion_estructuras_while ::= estructura_while 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = e;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_estructuras_while",35, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // declaracion_estructuras_while ::= estructura_pintar_iw 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = e;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_estructuras_while",35, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // declaracion_estructuras_while ::= declaracion_instr_wh 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		RESULT = e;
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_estructuras_while",35, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // declaracion_estructuras_while ::= error PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_estructuras_while",35, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // declaracion_instrucciones_while ::= declaracion_estructuras_while 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		ms.addValorIfWhile(e, eleft, eright);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_instrucciones_while",34, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // declaracion_instrucciones_while ::= declaracion_instrucciones_while declaracion_estructuras_while 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		ms.addValorIfWhile(e, eleft, eright);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_instrucciones_while",34, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // declaracion_instrucciones_if_while ::= declaracion_estructuras_if_while 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		ms.addValorIfWhile(e, eleft, eright);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_instrucciones_if_while",26, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // declaracion_instrucciones_if_while ::= declaracion_instrucciones_if_while declaracion_estructuras_if_while 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		ms.addValorIfWhile(e, eleft, eright);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_instrucciones_if_while",26, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // declaracion_instrucciones_else ::= declaracion_estructuras_if_while 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		ms.addValorElse(e, eleft, eright);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_instrucciones_else",33, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // declaracion_instrucciones_else ::= declaracion_instrucciones_else declaracion_estructuras_if_while 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		ms.addValorElse(e, eleft, eright);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_instrucciones_else",33, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // declaracion_instrucciones ::= declaracion_estructuras 
            {
              Object RESULT =null;

              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_instrucciones",24, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // declaracion_instrucciones ::= declaracion_instrucciones declaracion_estructuras 
            {
              Object RESULT =null;

              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("declaracion_instrucciones",24, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // estructura_instrucciones ::= Instrucciones ParentesisA instr_id ParentesisC LlaveA declaracion_instrucciones LlaveC 
            {
              Object RESULT =null;

              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("estructura_instrucciones",2, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // estructura_instrucciones ::= estructura_instrucciones Instrucciones ParentesisA instr_id ParentesisC LlaveA declaracion_instrucciones LlaveC 
            {
              Object RESULT =null;

              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("estructura_instrucciones",2, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // estructura_instrucciones ::= Instrucciones ParentesisA instr_id ParentesisC LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("estructura_instrucciones",2, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // estructura_instrucciones ::= estructura_instrucciones Instrucciones ParentesisA instr_id ParentesisC LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("estructura_instrucciones",2, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // estructura_instrucciones ::= error LlaveC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("estructura_instrucciones",2, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.elementAt(CUP$SintaxPintar$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // instr_id ::= Identificador 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintaxPintar$stack.peek()).value;
		ms.cargarTablaCorrespondiente(e.toString(), eleft, eright);
              CUP$SintaxPintar$result = parser.getSymbolFactory().newSymbol("instr_id",31, ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPintar$stack.peek()), RESULT);
            }
          return CUP$SintaxPintar$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxPintar$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxPintar$do_action(
    int                        CUP$SintaxPintar$act_num,
    java_cup.runtime.lr_parser CUP$SintaxPintar$parser,
    java.util.Stack            CUP$SintaxPintar$stack,
    int                        CUP$SintaxPintar$top)
    throws java.lang.Exception
    {
              return CUP$SintaxPintar$do_action_part00000000(
                               CUP$SintaxPintar$act_num,
                               CUP$SintaxPintar$parser,
                               CUP$SintaxPintar$stack,
                               CUP$SintaxPintar$top);
    }
}

}
