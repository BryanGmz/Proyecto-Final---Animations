
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package proyectoanimaciones.backed.analizador;

import java_cup.runtime.*;
import proyectoanimaciones.backed.objetos.*;
import proyectoanimaciones.backed.manejadores.*;
import proyectoanimaciones.gui.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner.
     * @param s Escaner
     */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner.
     * @param s Constructor which sets the default scanner.
     * @param sf Constructor which sets the default scanner */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\003\011\000\002\006\015" +
    "\000\002\006\017\000\002\006\004\000\002\007\005\000" +
    "\002\007\005\000\002\007\003\000\002\007\003\000\002" +
    "\010\013\000\002\010\007\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\012\005\000\002\013\013\000" +
    "\002\013\013\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\004\011\000\002\015\006\000\002\015\007\000" +
    "\002\015\011\000\002\015\010\000\002\015\004\000\002" +
    "\015\004\000\002\016\013\000\002\016\007\000\002\016" +
    "\015\000\002\016\011\000\002\005\011\000\002\017\013" +
    "\000\002\017\015\000\002\017\004\000\002\020\005\000" +
    "\002\020\007\000\002\020\005\000\002\020\007\000\002" +
    "\020\007\000\002\020\006\000\002\021\005\000\002\021" +
    "\007\000\002\022\013\000\002\022\013\000\002\022\013" +
    "\000\002\022\013\000\002\022\013\000\002\022\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\354\000\004\033\007\001\002\000\004\002\ufffe\001" +
    "\002\000\004\002\000\001\002\000\004\002\356\001\002" +
    "\000\010\004\012\005\011\006\013\001\002\000\004\002" +
    "\uffff\001\002\000\004\031\302\001\002\000\004\031\141" +
    "\001\002\000\004\031\014\001\002\000\004\033\015\001" +
    "\002\000\006\003\016\037\020\001\002\000\004\034\140" +
    "\001\002\000\006\032\124\034\125\001\002\000\004\031" +
    "\021\001\002\000\004\033\022\001\002\000\010\023\026" +
    "\024\025\025\024\001\002\000\004\032\117\001\002\000" +
    "\004\031\041\001\002\000\004\031\034\001\002\000\004" +
    "\031\027\001\002\000\006\030\030\044\031\001\002\000" +
    "\004\037\032\001\002\000\006\032\uffd2\034\uffd2\001\002" +
    "\000\004\030\033\001\002\000\006\032\uffd1\034\uffd1\001" +
    "\002\000\006\030\035\044\036\001\002\000\004\037\037" +
    "\001\002\000\006\032\uffd0\034\uffd0\001\002\000\004\030" +
    "\040\001\002\000\006\032\uffcf\034\uffcf\001\002\000\004" +
    "\035\042\001\002\000\006\033\045\036\043\001\002\000" +
    "\006\032\uffcd\034\uffcd\001\002\000\006\032\113\036\112" +
    "\001\002\000\006\026\046\027\050\001\002\000\004\031" +
    "\100\001\002\000\004\034\077\001\002\000\004\031\051" +
    "\001\002\000\010\040\054\041\053\042\052\001\002\000" +
    "\004\032\071\001\002\000\004\032\063\001\002\000\004" +
    "\032\055\001\002\000\004\026\056\001\002\000\004\031" +
    "\057\001\002\000\004\030\060\001\002\000\004\037\061" +
    "\001\002\000\004\030\062\001\002\000\004\034\uffc6\001" +
    "\002\000\004\026\064\001\002\000\004\031\065\001\002" +
    "\000\004\030\066\001\002\000\004\037\067\001\002\000" +
    "\004\030\070\001\002\000\004\034\uffc5\001\002\000\004" +
    "\026\072\001\002\000\004\031\073\001\002\000\004\030" +
    "\074\001\002\000\004\037\075\001\002\000\004\030\076" +
    "\001\002\000\004\034\uffc7\001\002\000\006\032\uffcc\036" +
    "\uffcc\001\002\000\004\030\101\001\002\000\004\037\102" +
    "\001\002\000\004\030\103\001\002\000\004\032\104\001" +
    "\002\000\004\027\105\001\002\000\004\031\106\001\002" +
    "\000\010\040\111\041\110\042\107\001\002\000\004\034" +
    "\uffca\001\002\000\004\034\uffc8\001\002\000\004\034\uffc9" +
    "\001\002\000\006\032\uffce\034\uffce\001\002\000\004\033" +
    "\114\001\002\000\006\026\046\027\050\001\002\000\004" +
    "\034\116\001\002\000\006\032\uffcb\036\uffcb\001\002\000" +
    "\010\023\026\024\025\025\024\001\002\000\004\032\121" +
    "\001\002\000\010\023\026\024\025\025\024\001\002\000" +
    "\004\034\123\001\002\000\006\032\uffd5\034\uffd5\001\002" +
    "\000\004\037\127\001\002\000\004\034\126\001\002\000" +
    "\004\002\uffd6\001\002\000\004\031\130\001\002\000\004" +
    "\033\131\001\002\000\010\023\026\024\025\025\024\001" +
    "\002\000\004\032\133\001\002\000\010\023\026\024\025" +
    "\025\024\001\002\000\004\032\135\001\002\000\010\023" +
    "\026\024\025\025\024\001\002\000\004\034\137\001\002" +
    "\000\006\032\uffd4\034\uffd4\001\002\000\006\032\uffd3\034" +
    "\uffd3\001\002\000\004\033\142\001\002\000\006\003\143" +
    "\037\145\001\002\000\004\034\301\001\002\000\006\032" +
    "\263\034\264\001\002\000\004\031\146\001\002\000\004" +
    "\033\147\001\002\000\014\007\155\010\151\011\157\015" +
    "\150\016\152\001\002\000\004\031\253\001\002\000\004" +
    "\031\251\001\002\000\004\031\222\001\002\000\006\032" +
    "\ufff7\034\ufff7\001\002\000\004\032\213\001\002\000\004" +
    "\031\211\001\002\000\006\032\ufff6\034\ufff6\001\002\000" +
    "\004\031\160\001\002\000\004\033\161\001\002\000\012" +
    "\012\165\013\167\014\163\022\164\001\002\000\004\032" +
    "\204\001\002\000\004\031\201\001\002\000\004\031\177" +
    "\001\002\000\004\031\174\001\002\000\004\034\173\001" +
    "\002\000\004\031\170\001\002\000\006\040\172\041\171" +
    "\001\002\000\006\032\ufff0\034\ufff0\001\002\000\006\032" +
    "\ufff1\034\ufff1\001\002\000\006\032\ufff4\034\ufff4\001\002" +
    "\000\006\040\176\041\175\001\002\000\006\032\ufff2\034" +
    "\ufff2\001\002\000\006\032\ufff3\034\ufff3\001\002\000\004" +
    "\045\200\001\002\000\004\034\uffed\001\002\000\006\040" +
    "\203\041\202\001\002\000\006\032\uffee\034\uffee\001\002" +
    "\000\006\032\uffef\034\uffef\001\002\000\010\012\165\013" +
    "\167\014\163\001\002\000\004\032\206\001\002\000\010" +
    "\012\165\013\167\014\163\001\002\000\004\034\210\001" +
    "\002\000\006\032\ufff5\034\ufff5\001\002\000\004\044\212" +
    "\001\002\000\006\032\ufff9\034\ufff9\001\002\000\014\007" +
    "\155\010\151\011\157\015\150\016\152\001\002\000\004" +
    "\032\215\001\002\000\014\007\155\010\151\011\157\015" +
    "\150\016\152\001\002\000\004\032\217\001\002\000\014" +
    "\007\155\010\151\011\157\015\150\016\152\001\002\000" +
    "\004\034\221\001\002\000\006\032\ufffc\034\ufffc\001\002" +
    "\000\004\033\223\001\002\000\010\017\225\020\227\021" +
    "\226\001\002\000\004\032\244\001\002\000\004\031\240" +
    "\001\002\000\004\031\234\001\002\000\004\031\230\001" +
    "\002\000\010\040\233\041\232\042\231\001\002\000\006" +
    "\032\uffe7\034\uffe7\001\002\000\006\032\uffe5\034\uffe5\001" +
    "\002\000\006\032\uffe6\034\uffe6\001\002\000\010\040\237" +
    "\041\236\042\235\001\002\000\006\032\uffe4\034\uffe4\001" +
    "\002\000\006\032\uffe2\034\uffe2\001\002\000\006\032\uffe3" +
    "\034\uffe3\001\002\000\010\040\243\041\242\042\241\001" +
    "\002\000\006\032\uffea\034\uffea\001\002\000\006\032\uffe8" +
    "\034\uffe8\001\002\000\006\032\uffe9\034\uffe9\001\002\000" +
    "\010\017\225\020\227\021\226\001\002\000\004\032\246" +
    "\001\002\000\010\017\225\020\227\021\226\001\002\000" +
    "\004\034\250\001\002\000\006\032\uffec\034\uffec\001\002" +
    "\000\004\043\252\001\002\000\006\032\ufff8\034\ufff8\001" +
    "\002\000\004\033\254\001\002\000\010\017\225\020\227" +
    "\021\226\001\002\000\004\032\256\001\002\000\010\017" +
    "\225\020\227\021\226\001\002\000\004\032\260\001\002" +
    "\000\010\017\225\020\227\021\226\001\002\000\004\034" +
    "\262\001\002\000\006\032\uffeb\034\uffeb\001\002\000\004" +
    "\037\266\001\002\000\004\034\265\001\002\000\004\002" +
    "\ufffd\001\002\000\004\031\267\001\002\000\004\033\270" +
    "\001\002\000\014\007\155\010\151\011\157\015\150\016" +
    "\152\001\002\000\004\032\272\001\002\000\014\007\155" +
    "\010\151\011\157\015\150\016\152\001\002\000\004\032" +
    "\274\001\002\000\014\007\155\010\151\011\157\015\150" +
    "\016\152\001\002\000\004\032\276\001\002\000\014\007" +
    "\155\010\151\011\157\015\150\016\152\001\002\000\004" +
    "\034\300\001\002\000\006\032\ufffb\034\ufffb\001\002\000" +
    "\006\032\ufffa\034\ufffa\001\002\000\004\033\303\001\002" +
    "\000\006\003\304\037\305\001\002\000\006\032\354\034" +
    "\355\001\002\000\004\031\347\001\002\000\006\032\307" +
    "\034\310\001\002\000\004\037\312\001\002\000\004\034" +
    "\311\001\002\000\004\002\uffe1\001\002\000\004\031\313" +
    "\001\002\000\004\033\314\001\002\000\006\034\316\037" +
    "\317\001\002\000\006\032\332\034\333\001\002\000\006" +
    "\032\uffdd\034\uffdd\001\002\000\004\031\320\001\002\000" +
    "\004\033\321\001\002\000\012\012\165\013\167\014\163" +
    "\022\164\001\002\000\004\032\325\001\002\000\004\034" +
    "\324\001\002\000\006\032\uffd9\034\uffd9\001\002\000\010" +
    "\012\165\013\167\014\163\001\002\000\004\032\327\001" +
    "\002\000\010\012\165\013\167\014\163\001\002\000\004" +
    "\034\331\001\002\000\006\032\uffda\034\uffda\001\002\000" +
    "\004\037\334\001\002\000\006\032\uffde\034\uffde\001\002" +
    "\000\004\031\335\001\002\000\004\033\336\001\002\000" +
    "\012\012\165\013\167\014\163\022\164\001\002\000\004" +
    "\032\342\001\002\000\004\034\341\001\002\000\006\032" +
    "\uffd7\034\uffd7\001\002\000\010\012\165\013\167\014\163" +
    "\001\002\000\004\032\344\001\002\000\010\012\165\013" +
    "\167\014\163\001\002\000\004\034\346\001\002\000\006" +
    "\032\uffd8\034\uffd8\001\002\000\004\033\350\001\002\000" +
    "\006\034\352\037\317\001\002\000\006\032\332\034\353" +
    "\001\002\000\006\032\uffe0\034\uffe0\001\002\000\006\032" +
    "\uffdf\034\uffdf\001\002\000\006\032\uffdb\034\uffdb\001\002" +
    "\000\006\032\uffdc\034\uffdc\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\354\000\012\002\005\003\004\004\007\005\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\117\001\001\000\002\001\001\000\004\020\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\131\001\001\000\002\001" +
    "\001\000\004\020\133\001\001\000\002\001\001\000\004" +
    "\020\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\153\010\152\013\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\161\012\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\204\001\001\000\002\001\001\000\004\011\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\213\010\152\013\155" +
    "\001\001\000\002\001\001\000\010\007\215\010\152\013" +
    "\155\001\001\000\002\001\001\000\010\007\217\010\152" +
    "\013\155\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\223\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\244\001" +
    "\001\000\002\001\001\000\004\014\246\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\254\001\001\000\002" +
    "\001\001\000\004\014\256\001\001\000\002\001\001\000" +
    "\004\014\260\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\270\010\152" +
    "\013\155\001\001\000\002\001\001\000\010\007\272\010" +
    "\152\013\155\001\001\000\002\001\001\000\010\007\274" +
    "\010\152\013\155\001\001\000\002\001\001\000\010\007" +
    "\276\010\152\013\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\305\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\314" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\321\012\322\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\325\001\001\000\002\001\001\000\004\011\327" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\336\012\337\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\342\001\001" +
    "\000\002\001\001\000\004\011\344\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\350" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ManejadorSintactico ms = ManejadorSintactico.getInstancia();
    private Principal principal;

    public Sintax(Lexico lexer, Principal principal) { 
        super(lexer);   
        this.principal = principal;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println("ERROR Lexico Tipo: " + tipo + "\t Mensaje: " + mensaje + "\tAcción: ERROR\n");
    }

    @Override
    public void syntax_error(Symbol s){
        try {
        if(s != null){
            principal.addErrores(
                    "\nError de Sintaxis: " 
                    + "\n\tLinea #:                 << " + (s.right + 1) + " >>"
                    + "\n\tColumna #                << " + (((s.left)/(s.right)) + 1) + " >>"
                    + "\n\tToken NO Reconocido:     << " + (s.value) + " >>" );
        } 
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= estructura_lienzo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		ManejadorSintactico.setLienzos((List<Lienzo>) e); ms.imprimir(); ms.imp(); System.out.println("\nAceptado Lienzo");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= estructura_colores 
            {
              Object RESULT =null;
		ms.imprimir(); ms.imp(); System.out.println("\nAceptado Colores");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= estructura_tiempo 
            {
              Object RESULT =null;
		ms.imprimir(); ms.imp(); System.out.println("\nAceptado Tiempo");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // estructura_lienzo ::= CorcheteA Lienzos DosPuntos CorcheteA declaracion_lienzo CorcheteC CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        if(e != null) {
            if(e instanceof Lienzo){
                List<Lienzo> listaLienzos = new ArrayList<>();
                listaLienzos.add((Lienzo) e);
                RESULT = listaLienzos;
            } else {
                RESULT = (List<Lienzo>) e;
            }
        } else {
            RESULT = new ArrayList<>();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_lienzo",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion_lienzo ::= Identificador DosPuntos CorcheteA struct_lienzo Coma struct_lienzo Coma struct_lienzo Coma struct_lienzo CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = ms.addLienzo(a, b, c, d, eleft, eright, e.toString(), aleft, aright, bleft, bright, cleft, cright, dleft, dright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_lienzo",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion_lienzo ::= declaracion_lienzo Coma Identificador DosPuntos CorcheteA struct_lienzo Coma struct_lienzo Coma struct_lienzo Coma struct_lienzo CorcheteC 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = ms.addListLienzo(x, ms.addLienzo(a, b, c, d, eleft, eright, e.toString(), aleft, aright, bleft, bright, cleft, cright, dleft, dright), xleft, xright, eleft, eright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_lienzo",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion_lienzo ::= error CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_lienzo",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // struct_lienzo ::= Nombre DosPuntos NombreLienzo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = ms.add(e.toString(), eleft, eright, "Nombre");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_lienzo",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // struct_lienzo ::= Tipo DosPuntos Extension 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = ms.add(e.toString(), eleft, eright, "Tipo");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_lienzo",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // struct_lienzo ::= declaracion_fondo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = (Fondo) e;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_lienzo",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // struct_lienzo ::= declaracion_tamaño 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = (Tamaño) e;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_lienzo",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion_fondo ::= Fondo DosPuntos CorcheteA fondo_rgb Coma fondo_rgb Coma fondo_rgb CorcheteC 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = ms.addFondo(ms.comprobarRGB(a, b, c, aleft, aright, bleft, bright, cleft, cright), xleft, xright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_fondo",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion_fondo ::= Fondo DosPuntos CorcheteA fondo_hex CorcheteC 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = ms.addFondo(new Fondo(e.toString()), xleft, xright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_fondo",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // fondo_rgb ::= Red DosPuntos NumeroRGB_1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = ms.addRGB(new Red(Integer.parseInt(e.toString())), 1, eleft, eright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fondo_rgb",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // fondo_rgb ::= Red DosPuntos NumeroRGB_2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = ms.addRGB(new Red(Integer.parseInt(e.toString())), 1, eleft, eright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fondo_rgb",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // fondo_rgb ::= Blue DosPuntos NumeroRGB_1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = ms.addRGB(new Blue(Integer.parseInt(e.toString())), 2, eleft, eright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fondo_rgb",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // fondo_rgb ::= Blue DosPuntos NumeroRGB_2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = ms.addRGB(new Blue(Integer.parseInt(e.toString())), 2, eleft, eright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fondo_rgb",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // fondo_rgb ::= Green DosPuntos NumeroRGB_1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = ms.addRGB(new Green(Integer.parseInt(e.toString())), 3, eleft, eright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fondo_rgb",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fondo_rgb ::= Green DosPuntos NumeroRGB_2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = ms.addRGB(new Green(Integer.parseInt(e.toString())), 3, eleft, eright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fondo_rgb",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fondo_hex ::= Hex DosPuntos Hexadecimal 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString().replaceAll("#", "");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fondo_hex",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracion_tamaño ::= Tamaño DosPuntos CorcheteA estructura_tamaño Coma estructura_tamaño Coma estructura_tamaño CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = ms.addTamaño(ms.comprobarTamaño(a, b, c, aleft, aright, bleft, bright, cleft, cright), eleft, eright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_tamaño",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracion_tamaño ::= TamañoR DosPuntos CorcheteA estructura_tamaño Coma estructura_tamaño Coma estructura_tamaño CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = ms.addTamaño(ms.comprobarTamaño(a, b, c, aleft, aright, bleft, bright, cleft, cright), eleft, eright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_tamaño",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // estructura_tamaño ::= Cuadro DosPuntos Numero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = ms.addCDXY(e, 1, eleft, eright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_tamaño",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // estructura_tamaño ::= Cuadro DosPuntos NumeroRGB_1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = ms.addCDXY(e, 1, eleft, eright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_tamaño",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // estructura_tamaño ::= Cuadro DosPuntos NumeroRGB_2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = ms.addCDXY(e, 1, eleft, eright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_tamaño",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // estructura_tamaño ::= DimensionX DosPuntos Numero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = ms.addCDXY(e, 2, eleft, eright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_tamaño",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // estructura_tamaño ::= DimensionX DosPuntos NumeroRGB_1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = ms.addCDXY(e, 2, eleft, eright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_tamaño",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // estructura_tamaño ::= DimensionX DosPuntos NumeroRGB_2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = ms.addCDXY(e, 2, eleft, eright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_tamaño",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // estructura_tamaño ::= DimensionY DosPuntos Numero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = ms.addCDXY(e, 3, eleft, eright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_tamaño",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // estructura_tamaño ::= DimensionY DosPuntos NumeroRGB_1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = ms.addCDXY(e, 3, eleft, eright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_tamaño",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // estructura_tamaño ::= DimensionY DosPuntos NumeroRGB_2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = ms.addCDXY(e, 3, eleft, eright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_tamaño",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // estructura_colores ::= CorcheteA Colores DosPuntos CorcheteA declaracion_colores CorcheteC CorcheteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_colores",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracion_colores ::= Identificador DosPuntos CorcheteA CorcheteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_colores",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracion_colores ::= Identificador DosPuntos CorcheteA struct_id_color CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		ms.comprobarAddColores(e, a, eleft, eright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_colores",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracion_colores ::= declaracion_colores Coma Identificador DosPuntos CorcheteA struct_id_color CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		ms.comprobarAddColores(e, a, eleft, eright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_colores",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracion_colores ::= declaracion_colores Coma Identificador DosPuntos CorcheteA CorcheteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_colores",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracion_colores ::= error CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_colores",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracion_colores ::= error Coma 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_colores",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // struct_id_color ::= Identificador DosPuntos CorcheteA fondo_rgb Coma fondo_rgb Coma fondo_rgb CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = ms.comprobarColor(e.toString(), ms.comprobarRGB(a, b, c, aleft, aright, bleft, bright, cleft, cright), eleft, eright, eleft, eright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_id_color",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // struct_id_color ::= Identificador DosPuntos CorcheteA fondo_hex CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = ms.comprobarColor(e.toString(), new Fondo(a.toString()), eleft, eright, eleft, eright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_id_color",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // struct_id_color ::= struct_id_color Coma Identificador DosPuntos CorcheteA fondo_rgb Coma fondo_rgb Coma fondo_rgb CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = ms.listaColores(e, ms.comprobarColor(a.toString(), ms.comprobarRGB(b, c, d, bleft, bright, cleft, cright, dleft, dright), aleft, aright, aleft, aright), eleft, eright, aleft, aright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_id_color",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // struct_id_color ::= struct_id_color Coma Identificador DosPuntos CorcheteA fondo_hex CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = ms.listaColores(e, ms.comprobarColor(a.toString(), new Fondo(b.toString()), bleft, bright, aleft, aright), eleft, eright, aleft, aright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_id_color",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // estructura_tiempo ::= CorcheteA Tiempos DosPuntos CorcheteA declaracion_tiempo CorcheteC CorcheteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_tiempo",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracion_tiempo ::= Identificador DosPuntos CorcheteA struct_id_tiempo Coma struct_id_tiempo Coma struct_id_tiempo CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		ms.comprobarDuracion(e.toString(), ms.comprobarTiempo(a, b, c, aleft, aright, bleft, bright, cleft, cright), eleft, eright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_tiempo",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaracion_tiempo ::= declaracion_tiempo Coma Identificador DosPuntos CorcheteA struct_id_tiempo Coma struct_id_tiempo Coma struct_id_tiempo CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		ms.comprobarDuracion(e.toString(), ms.comprobarTiempo(a, b, c, aleft, aright, bleft, bright, cleft, cright), eleft, eright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_tiempo",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaracion_tiempo ::= error CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_tiempo",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // struct_id_tiempo ::= Inicio DosPuntos NombreLienzo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = ms.add(a.toString().replaceAll("\"", ""), eleft, eright, "Inicio");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_id_tiempo",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // struct_id_tiempo ::= Inicio DosPuntos Comillas Identificador Comillas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = ms.add(a.toString(), eleft, eright, "Inicio");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_id_tiempo",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // struct_id_tiempo ::= Fin DosPuntos NombreLienzo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = ms.add(a.toString().replaceAll("\"", ""), eleft, eright, "Fin");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_id_tiempo",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // struct_id_tiempo ::= Fin DosPuntos Comillas Identificador Comillas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = ms.add(a.toString(), eleft, eright, "Fin");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_id_tiempo",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // struct_id_tiempo ::= Imagenes DosPuntos LlaveA estructura_imagenes LlaveC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = ms.comprobarTimeImg(e, eleft, eright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_id_tiempo",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // struct_id_tiempo ::= Imagenes DosPuntos LlaveA LlaveC 
            {
              Object RESULT =null;
		RESULT = ms.addVacioTimeImg();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_id_tiempo",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // estructura_imagenes ::= CorcheteA declaracion_duracion CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = e;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_imagenes",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // estructura_imagenes ::= estructura_imagenes Coma CorcheteA declaracion_duracion CorcheteC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = ms.listaDuraciones(a, e);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_imagenes",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaracion_duracion ::= Id DosPuntos Comillas Identificador Comillas Coma Duracion DosPuntos Numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = ms.comprobarExistenciaDuracionImg(new Duracion(a.toString(), Integer.parseInt(e.toString())), aleft, aright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_duracion",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaracion_duracion ::= Id DosPuntos Comillas Identificador Comillas Coma Duracion DosPuntos NumeroRGB_1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = ms.comprobarExistenciaDuracionImg(new Duracion(a.toString(), Integer.parseInt(e.toString())), aleft, aright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_duracion",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaracion_duracion ::= Id DosPuntos Comillas Identificador Comillas Coma Duracion DosPuntos NumeroRGB_2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = ms.comprobarExistenciaDuracionImg(new Duracion(a.toString(), Integer.parseInt(e.toString())), aleft, aright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_duracion",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaracion_duracion ::= Duracion DosPuntos Numero Coma Id DosPuntos Comillas Identificador Comillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = ms.comprobarExistenciaDuracionImg(new Duracion(a.toString(), Integer.parseInt(e.toString())), aleft, aright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_duracion",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaracion_duracion ::= Duracion DosPuntos NumeroRGB_1 Coma Id DosPuntos Comillas Identificador Comillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = ms.comprobarExistenciaDuracionImg(new Duracion(a.toString(), Integer.parseInt(e.toString())), aleft, aright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_duracion",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declaracion_duracion ::= Duracion DosPuntos NumeroRGB_2 Coma Id DosPuntos Comillas Identificador Comillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = ms.comprobarExistenciaDuracionImg(new Duracion(a.toString(), Integer.parseInt(e.toString())), aleft, aright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_duracion",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
